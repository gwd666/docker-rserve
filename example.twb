<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9300.16.0315.0125                                -->
<workbook locale='en_US' source-build='9.3.0 (9300.16.0315.0125)' source-platform='mac' version='9.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='9.3'>
      <aliases enabled='yes' />
      <column caption='component' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='3'>
        <calculation class='tableau' formula='3' />
        <range min='1' />
      </column>
      <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
        <calculation class='tableau' formula='&quot;cosangle&quot;' />
        <members>
          <member value='&quot;cosangle&quot;' />
          <member value='&quot;abscosangle&quot;' />
          <member value='&quot;euclid&quot;' />
          <member value='&quot;cor&quot;' />
          <member value='&quot;abscor&quot;' />
        </members>
      </column>
      <column caption='color by' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Petal.Width&quot;'>
        <calculation class='tableau' formula='&quot;Petal.Width&quot;' />
        <members>
          <member value='&quot;Petal.Length&quot;' />
          <member value='&quot;Petal.Width&quot;' />
        </members>
      </column>
      <column caption='locache entry' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;lat&quot;'>
        <calculation class='tableau' formula='&quot;lat&quot;' />
        <members>
          <member value='&quot;timeZoneId&quot;' />
          <member value='&quot;utcOffset&quot;' />
          <member value='&quot;city&quot;' />
          <member value='&quot;country&quot;' />
          <member value='&quot;lat&quot;' />
          <member value='&quot;formattedAddress&quot;' />
          <member value='&quot;dstOffset&quot;' />
          <member value='&quot;timeUntilTomorrow&quot;' />
          <member value='&quot;utcFromTimestamp&quot;' />
          <member value='&quot;timeZoneName&quot;' />
          <member value='&quot;s&quot;' />
          <member value='&quot;rawOffset&quot;' />
          <member value='&quot;lng&quot;' />
        </members>
      </column>
      <column caption='mysql table' datatype='string' name='[Parameter 5]' param-domain-type='any' role='measure' type='nominal' value='&quot;tmp&quot;'>
        <calculation class='tableau' formula='&quot;tmp&quot;' />
      </column>
      <column caption='overwrite table?' datatype='boolean' name='[Parameter 6]' param-domain-type='list' role='measure' type='nominal' value='true'>
        <calculation class='tableau' formula='true' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
      <column caption='append data to table?' datatype='boolean' name='[Parameter 7]' param-domain-type='list' role='measure' type='nominal' value='false'>
        <calculation class='tableau' formula='false' />
        <members>
          <member value='true' />
          <member value='false' />
        </members>
      </column>
    </datasource>
    <datasource caption='tableau' inline='true' name='mysql.11dbwcn1vr1ye315u9q3g19seb77' version='9.3'>
      <connection class='mysql' dbname='tableau' odbc-native-protocol='yes' port='3306' server='192.168.99.100' source-charset='' username='root'>
        <relation name='tmp' table='[tmp]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>row_names</remote-name>
            <remote-type>130</remote-type>
            <local-name>[row_names]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>row_names</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lat</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lat]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>lat</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>53</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DOUBLE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timeZoneName</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeZoneName]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>timeZoneName</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>city</remote-name>
            <remote-type>130</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>utcFromTimestamp</remote-name>
            <remote-type>130</remote-type>
            <local-name>[utcFromTimestamp]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>utcFromTimestamp</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rawOffset</remote-name>
            <remote-type>20</remote-type>
            <local-name>[rawOffset]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>rawOffset</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lng</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lng]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>lng</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>53</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_DOUBLE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>formattedAddress</remote-name>
            <remote-type>130</remote-type>
            <local-name>[formattedAddress]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>formattedAddress</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timeZoneId</remote-name>
            <remote-type>130</remote-type>
            <local-name>[timeZoneId]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>timeZoneId</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dstOffset</remote-name>
            <remote-type>20</remote-type>
            <local-name>[dstOffset]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>dstOffset</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>timeUntilTomorrow</remote-name>
            <remote-type>20</remote-type>
            <local-name>[timeUntilTomorrow]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>timeUntilTomorrow</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>utcOffset</remote-name>
            <remote-type>20</remote-type>
            <local-name>[utcOffset]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>utcOffset</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>s</remote-name>
            <remote-type>130</remote-type>
            <local-name>[s]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>s</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>address</remote-name>
            <remote-type>130</remote-type>
            <local-name>[address]</local-name>
            <parent-name>[tmp]</parent-name>
            <remote-alias>address</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>21845</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LROOT' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Dst Offset' datatype='integer' name='[dstOffset]' role='measure' type='quantitative' />
      <column caption='Formatted Address' datatype='string' name='[formattedAddress]' role='dimension' type='nominal' />
      <column aggregation='Avg' caption='Lat' datatype='real' name='[lat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' caption='Lng' datatype='real' name='[lng]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column caption='Raw Offset' datatype='integer' name='[rawOffset]' role='measure' type='quantitative' />
      <column caption='Row Names' datatype='string' name='[row_names]' role='dimension' type='nominal' />
      <column caption='S' datatype='string' name='[s]' role='dimension' type='nominal' />
      <column caption='Time Until Tomorrow' datatype='integer' name='[timeUntilTomorrow]' role='measure' type='quantitative' />
      <column caption='Time Zone Id' datatype='string' name='[timeZoneId]' role='dimension' type='nominal' />
      <column caption='Time Zone Name' datatype='string' name='[timeZoneName]' role='dimension' type='nominal' />
      <column caption='Utc From Timestamp' datatype='string' name='[utcFromTimestamp]' role='dimension' type='nominal' />
      <column caption='Utc Offset' datatype='integer' name='[utcOffset]' role='measure' type='quantitative' />
      <drill-paths>
        <drill-path name='country, city'>
          <field>[country]</field>
          <field>[city]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.359111' measure-ordering='alphabetic' measure-percentage='0.344' parameter-percentage='0.296889' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='restaurants' inline='true' name='textscan.1kt900h04bxgy615sxtd017dr75v' version='9.3'>
      <connection class='textscan' directory='/Users/user/repos/docker-rserve' filename='restaurants.csv' password='' server='' username=''>
        <relation name='restaurants#csv' table='[restaurants#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator='&quot;' text-qualifier=''>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='string' name='restaurant' ordinal='1' />
            <column datatype='string' name=':' ordinal='2' />
            <column datatype='string' name='address' ordinal='3' />
            <column datatype='string' name='F5' ordinal='4' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <hidden>true</hidden>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>restaurant</remote-name>
            <remote-type>129</remote-type>
            <local-name>[restaurant]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>restaurant</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>:</remote-name>
            <remote-type>129</remote-type>
            <local-name>[:]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>:</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>address</remote-name>
            <remote-type>129</remote-type>
            <local-name>[address]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>address</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F5</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F5]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>F5</remote-alias>
            <ordinal>4</ordinal>
            <hidden>true</hidden>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;\&quot;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='quote-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='&quot;Restaurant&quot;:&quot;Address&quot;' datatype='string' hidden='true' name='[&quot;restaurant&quot;:&quot;address&quot;]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[:]' role='dimension' type='nominal' />
      <column caption='locache results' datatype='string' name='[Calculation_1152077082853969922]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheAndConcat &lt;- function(location) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;%&#10;    unlist %&gt;%&#10;    paste(collapse = &quot;;&quot;)&#10;}&#10;&#10;getLocacheAndConcat(.arg1)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column datatype='string' hidden='true' name='[F1]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[F5]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
      <column caption='debug2' datatype='boolean' name='[debug (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_BOOL(&apos;&#10;require(magrittr) &amp;&amp; require(DBI)&#10;keyCol &lt;- .arg1&#10;&apos;, ATTR([restaurant]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='locache lat' datatype='string' name='[locache lng (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lat&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='locache lat -- bad!' datatype='string' name='[locache results (copy 2)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='// cannot calculate futher than table calculation! =(&#13;&#10;SPLIT([Calculation_1152077082853969922], &apos;;&apos;, 4)'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='specific locache entry' datatype='string' name='[locache results (copy 3)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, .arg2)&#10;&apos;, ATTR([address]), [Parameters].[Parameter 4])'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='write locache results to mysql table' datatype='string' name='[locache results (copy 4)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;# requires magrittr, data.table, httr&#10;getLocacheInfo &lt;- function(locations) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;,&#10;             &quot;%Y-%m-%d %H:%M:%S&quot;,&#10;             tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;&#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;, &quot;utcOffset&quot;: 3600, &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;, &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0, &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;, &quot;rawOffset&quot;: 3600, &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  lapply(locations,&#10;         function(location) {&#10;           httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;                     query = list(location=location, timestamp=timestamp)) %&gt;%&#10;                       httr::content() %&gt;%&#10;                       as.data.table&#10;         }) %&gt;%&#10;           rbindlist %&gt;%&#10;           set(j = &quot;address&quot;, value = locations) %&gt;%&#10;           return&#10;}&#10;&#10;tableName &lt;- .arg2&#10;overwriteData &lt;- .arg3&#10;appendData &lt;- .arg4&#10;tableData &lt;- getLocacheInfo(.arg1)&#10;if (overwriteData) {&#10;tryCatch(dbRemoveTable(dbConn, tableName))&#10;}&#10;&#10;dbConn %&gt;%&#10;dbWriteTable(&#10; name = tableName,&#10; value = tableData,&#10; overwrite = overwriteData,&#10; append = appendData,&#10; temporary=TRUE&#10;)&#10;Sys.time()&#10;&apos;,&#10; ATTR([address]),&#10; [Parameters].[Parameter 5],&#10; [Parameters].[Parameter 6],&#10; [Parameters].[Parameter 7])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='debug' datatype='string' name='[locache results (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;paste0(capture.output(str(.arg1)), collapse=&quot;\n&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='Restaurant' datatype='string' name='[restaurant]' role='dimension' type='nominal' />
      <column caption='locache lng' datatype='string' name='[specific locache entry (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lng&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/user/repos/docker-rserve/restaurants_extract.tde' schema='Extract' tablename='Extract' update-time='04/11/2016 07:27:04 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='7' timestamp-start='2016-04-11 19:27:04.362' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>7.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>7.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>address</remote-name>
              <remote-type>129</remote-type>
              <local-name>[address]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>address</remote-alias>
              <ordinal>1</ordinal>
              <family>restaurants#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Am Falkplatz 5&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Schönhauser Allee 50, 10437&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;Oberbaumstraße 8, 10997&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>restaurant</remote-name>
              <remote-type>129</remote-type>
              <local-name>[restaurant]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>restaurant</remote-alias>
              <ordinal>2</ordinal>
              <family>restaurants#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;BBI&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Tommi&apos;s Burger Joint&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.274667' measure-ordering='alphabetic' measure-percentage='0.386667' parameter-percentage='0.338667' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='locache entry' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;lat&quot;'>
          <calculation class='tableau' formula='&quot;lat&quot;' />
        </column>
        <column caption='mysql table' datatype='string' name='[Parameter 5]' param-domain-type='any' role='measure' type='nominal' value='&quot;tmp&quot;'>
          <calculation class='tableau' formula='&quot;tmp&quot;' />
        </column>
        <column caption='overwrite table?' datatype='boolean' name='[Parameter 6]' param-domain-type='list' role='measure' type='nominal' value='true'>
          <calculation class='tableau' formula='true' />
        </column>
        <column caption='append data to table?' datatype='boolean' name='[Parameter 7]' param-domain-type='list' role='measure' type='nominal' value='false'>
          <calculation class='tableau' formula='false' />
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='iris_data' inline='true' name='textscan.1liry6e1vjbszh12mzcn81bghamr' version='9.3'>
      <connection class='textscan' directory='/Users/user/repos/docker-rserve' filename='restaurants.csv' password='' server='' username=''>
        <relation name='iris#csv' table='[iris#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='real' name='Sepal.Length' ordinal='1' />
            <column datatype='real' name='Sepal.Width' ordinal='2' />
            <column datatype='real' name='Petal.Length' ordinal='3' />
            <column datatype='real' name='Petal.Width' ordinal='4' />
            <column datatype='string' name='Species' ordinal='5' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sepal.Length</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sepal.Length]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Sepal.Length</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sepal.Width</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sepal.Width]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Sepal.Width</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Petal.Length</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Petal.Length]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Petal.Length</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Petal.Width</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Petal.Width]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Petal.Width</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Species</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Species]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Species</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='locache results' datatype='string' name='[Calculation_1152077082850844672]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(magrittr)&#10;&#10;getLocacheAndConcat &lt;- function(location) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;%&#10;    unlist %&gt;%&#10;    paste(collapse = &quot;;&quot;)&#10;}&#10;&#10;address &lt;- .arg1&#10;address %&gt;% sapply(getLocacheAndConcat)&#10;&apos;,&#10;MAX([textscan.1kt900h04bxgy615sxtd017dr75v].[address]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='hopach clustering' datatype='integer' name='[Calculation_213358033591664641]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;sepal_length &lt;- .arg1&#13;&#10;sepal_width &lt;- .arg2&#13;&#10;petal_length &lt;- .arg3&#13;&#10;petal_width &lt;- .arg4&#13;&#10;&#13;&#10;# if we had mixed data types, we&apos;d have to write our own distance&#13;&#10;# function, in which case, we&apos;d want to use hopach::distancematrix&#13;&#10;#&#13;&#10;# But, instead, we have all numeric data, so we can call hopach::hopach&#13;&#10;# directly, with various prebuilt distance functions (e.g., &apos;cosangle&apos;,&#13;&#10;# &apos;abscosangle&apos;, &apos;euclid&apos;, &apos;abseuclid&apos;, &apos;cor&apos;, &apos;abscor&apos;)&#13;&#10;dist_function &lt;- .arg5&#13;&#10;&#13;&#10;&#13;&#10;input_matrix &lt;-&#13;&#10;  data.frame(sepal_length, sepal_width, petal_length, petal_width)&#13;&#10;results &lt;- hopach::hopach(input_matrix, d = dist_function)&#13;&#10;results$clustering$labels&#13;&#10;&quot;,&#13;&#10;SUM([Sepal.Length]), SUM([Sepal.Width]), SUM([Petal.Length]), SUM([Petal.Width]),&#13;&#10;[Parameters].[Parameter 2])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='colorization' datatype='real' name='[Calculation_213358033612091403]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;WHEN &apos;Petal.Length&apos; THEN [Petal.Length]&#13;&#10;WHEN &apos;Petal.Width&apos; THEN [Petal.Width]&#13;&#10;END' />
      </column>
      <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Species]' role='dimension' type='nominal' />
      <column caption='debug' datatype='string' name='[hopach clustering (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;paste0(capture.output(table(.arg1)), collapse=&apos;\n&apos;)&#13;&#10;&quot;, MAX([Species]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
      <group caption='Action (F1)' hidden='true' name='[Action (F1)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[F1]' />
        </groupfilter>
      </group>
      <group caption='Action (Species (group),Species)' hidden='true' name='[Action (Species (group),Species)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Species (group)]' />
          <groupfilter function='level-members' level='[Species]' />
        </groupfilter>
      </group>
      <group caption='Action (Species)' hidden='true' name='[Action (Species)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Species]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='/Users/user/repos/docker-rserve/iris_extract.tde' schema='Extract' tablename='Extract' update-time='04/12/2016 01:21:32 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='150' timestamp-start='2016-04-12 13:21:32.983' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>2</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>iris#csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>150</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>11325.0</statistic>
                <statistic aggregation='Avg' datatype='real'>75.5</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>150</statistic>
                <statistic aggregation='Stdev' datatype='real'>43.445367992456916</statistic>
                <statistic aggregation='StdevP' datatype='real'>43.300307928081374</statistic>
                <statistic aggregation='Var' datatype='real'>1887.5</statistic>
                <statistic aggregation='VarP' datatype='real'>1874.9166666666667</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='integer'>76</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1136275.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>150.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>150.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Petal.Length</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Petal.Length]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Petal.Length</remote-alias>
              <ordinal>2</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>43</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>563.70000000000039</statistic>
                <statistic aggregation='Avg' datatype='real'>3.7580000000000027</statistic>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>6.9000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>1.7652982332594618</statistic>
                <statistic aggregation='StdevP' datatype='real'>1.7594040657752985</statistic>
                <statistic aggregation='Var' datatype='real'>3.1162778523489774</statistic>
                <statistic aggregation='VarP' datatype='real'>3.095502666666651</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>2582.7100000000005</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Petal.Width</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Petal.Width]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Petal.Width</remote-alias>
              <ordinal>3</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>22</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>179.90000000000012</statistic>
                <statistic aggregation='Avg' datatype='real'>1.199333333333334</statistic>
                <statistic aggregation='Min' datatype='real'>0.10000000000000001</statistic>
                <statistic aggregation='Max' datatype='real'>2.5</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.76223766896034573</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.75969262790215863</statistic>
                <statistic aggregation='Var' datatype='real'>0.58100626398210165</statistic>
                <statistic aggregation='VarP' datatype='real'>0.5771328888888877</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>302.3300000000001</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sepal.Length</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sepal.Length]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sepal.Length</remote-alias>
              <ordinal>4</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>35</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>876.50000000000023</statistic>
                <statistic aggregation='Avg' datatype='real'>5.8433333333333346</statistic>
                <statistic aggregation='Min' datatype='real'>4.2999999999999998</statistic>
                <statistic aggregation='Max' datatype='real'>7.9000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.82806612797784407</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.82530129178512213</statistic>
                <statistic aggregation='Var' datatype='real'>0.68569351230421927</statistic>
                <statistic aggregation='VarP' datatype='real'>0.68112222222219121</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>5223.8499999999976</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sepal.Width</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sepal.Width]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sepal.Width</remote-alias>
              <ordinal>5</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>23</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>458.60000000000014</statistic>
                <statistic aggregation='Avg' datatype='real'>3.0573333333333341</statistic>
                <statistic aggregation='Min' datatype='real'>2.0</statistic>
                <statistic aggregation='Max' datatype='real'>4.4000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.43586628493668372</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.4344109677354801</statistic>
                <statistic aggregation='Var' datatype='real'>0.18997941834450635</statistic>
                <statistic aggregation='VarP' datatype='real'>0.18871288888887633</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1430.399999999999</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Species</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Species]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Species</remote-alias>
              <ordinal>6</ordinal>
              <family>iris#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;setosa&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;virginica&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;versicolor&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.297485' measure-ordering='alphabetic' measure-percentage='0.405898' parameter-percentage='0.296618' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='shape' field='[none:Species:nk]' type='shape'>
            <map to='plus'>
              <bucket>&quot;setosa&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;virginica&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;versicolor&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Species:nk]' type='palette'>
            <map to='#309343'>
              <bucket>&quot;virginica&quot;</bucket>
            </map>
            <map to='#b10318'>
              <bucket>&quot;setosa&quot;</bucket>
            </map>
            <map to='#dba13a'>
              <bucket>&quot;versicolor&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
          <calculation class='tableau' formula='&quot;cosangle&quot;' />
        </column>
        <column caption='color by' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Petal.Width&quot;'>
          <calculation class='tableau' formula='&quot;Petal.Width&quot;' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='textscan.1kt900h04bxgy615sxtd017dr75v'>
        <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='shortcomings' type='sheet' worksheet='scatterplot 1' />
      <command command='tsc:brush'>
        <param name='exclude' value='scatterplot 1' />
        <param name='field-captions' value='observation id' />
        <param name='target' value='shortcomings' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='shortcomings' type='sheet' worksheet='iris species vs. cluster id' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='shortcomings' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='restaurants' name='textscan.1kt900h04bxgy615sxtd017dr75v' />
          </datasources>
          <datasource-dependencies datasource='textscan.1kt900h04bxgy615sxtd017dr75v'>
            <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
            <column caption='locache lat' datatype='string' name='[locache lng (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lat&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column caption='debug' datatype='string' name='[locache results (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;paste0(capture.output(str(.arg1)), collapse=&quot;\n&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column-instance column='[address]' derivation='None' name='[none:address:nk]' pivot='key' type='nominal' />
            <column-instance column='[restaurant]' derivation='None' name='[none:restaurant:nk]' pivot='key' type='nominal' />
            <column caption='Restaurant' datatype='string' name='[restaurant]' role='dimension' type='nominal' />
            <column caption='locache lng' datatype='string' name='[specific locache entry (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lng&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column-instance column='[locache lng (copy)]' derivation='User' name='[usr:locache lng (copy):nk]' pivot='key' type='nominal'>
              <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
              </table-calc>
            </column-instance>
            <column-instance column='[locache results (copy)]' derivation='User' name='[usr:locache results (copy):nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='CellInPane' />
            </column-instance>
            <column-instance column='[specific locache entry (copy)]' derivation='User' name='[usr:specific locache entry (copy):nk]' pivot='key' type='nominal'>
              <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='511' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk]' value='180' />
            <format attr='width' field='[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]' value='128' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk:1]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk] / ([textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk] / ([textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache lng (copy):nk] / [textscan.1kt900h04bxgy615sxtd017dr75v].[usr:specific locache entry (copy):nk])))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='data blending with R'>
      <table>
        <view>
          <datasources>
            <datasource caption='restaurants' name='textscan.1kt900h04bxgy615sxtd017dr75v' />
            <datasource caption='tableau' name='mysql.11dbwcn1vr1ye315u9q3g19seb77' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='mysql.11dbwcn1vr1ye315u9q3g19seb77'>
            <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
            <column-instance column='[lat]' derivation='Avg' name='[avg:lat:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lng]' derivation='Avg' name='[avg:lng:qk]' pivot='key' type='quantitative' />
            <column aggregation='Avg' caption='Lat' datatype='real' name='[lat]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' caption='Lng' datatype='real' name='[lng]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.1kt900h04bxgy615sxtd017dr75v'>
            <column-instance column='[restaurant]' derivation='None' name='[none:restaurant:nk]' pivot='key' type='nominal' />
            <column caption='Restaurant' datatype='string' name='[restaurant]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[mysql.11dbwcn1vr1ye315u9q3g19seb77].[avg:lng:qk]' field-type='quantitative' max='1500337.7545881376' min='1488202.4261638126' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[mysql.11dbwcn1vr1ye315u9q3g19seb77].[avg:lat:qk]' field-type='quantitative' max='6902127.9466248406' min='6885506.0602529924' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[mysql.11dbwcn1vr1ye315u9q3g19seb77].[avg:lat:qk]' value='' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[avg:lat:qk]</rows>
        <cols>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[avg:lng:qk]</cols>
        <join-lod-include-overrides>
          <column>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[address]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='iris species vs. cluster id'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>&lt;</run>
            <run>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</run>
            <run>&gt;</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
              <calculation class='tableau' formula='&quot;cosangle&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='hopach clustering' datatype='integer' name='[Calculation_213358033591664641]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;sepal_length &lt;- .arg1&#13;&#10;sepal_width &lt;- .arg2&#13;&#10;petal_length &lt;- .arg3&#13;&#10;petal_width &lt;- .arg4&#13;&#10;&#13;&#10;# if we had mixed data types, we&apos;d have to write our own distance&#13;&#10;# function, in which case, we&apos;d want to use hopach::distancematrix&#13;&#10;#&#13;&#10;# But, instead, we have all numeric data, so we can call hopach::hopach&#13;&#10;# directly, with various prebuilt distance functions (e.g., &apos;cosangle&apos;,&#13;&#10;# &apos;abscosangle&apos;, &apos;euclid&apos;, &apos;abseuclid&apos;, &apos;cor&apos;, &apos;abscor&apos;)&#13;&#10;dist_function &lt;- .arg5&#13;&#10;&#13;&#10;&#13;&#10;input_matrix &lt;-&#13;&#10;  data.frame(sepal_length, sepal_width, petal_length, petal_width)&#13;&#10;results &lt;- hopach::hopach(input_matrix, d = dist_function)&#13;&#10;results$clustering$labels&#13;&#10;&quot;,&#13;&#10;SUM([Sepal.Length]), SUM([Sepal.Width]), SUM([Petal.Length]), SUM([Petal.Width]),&#13;&#10;[Parameters].[Parameter 2])'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='Attribute' name='[attr:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:F1:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#404b73' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</rows>
        <cols>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='mega scatterplot'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Note: &#10;1. we&apos;ll have to modify the transparency to see what&apos;s going on in the Sepal.Width vs. Sepal.Width plot&#10;2. we can make some pretty crude algorithms with decision stumps</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Length]' derivation='Sum' name='[sum:Sepal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Width]' derivation='Sum' name='[sum:Sepal.Width:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]'>
            <groupfilter function='level-members' level='[Species]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
          <pane id='8' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk] + ([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk] + ([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk])))</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk] + ([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk] + ([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk])))</cols>
      </table>
    </worksheet>
    <worksheet name='normalized p.w vs. p.l'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_189151187457298433]' derivation='User' name='[usr:Calculation_189151187457298433:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='RowInPane' />
            </column-instance>
            <column-instance column='[normalized petal length (copy)]' derivation='User' name='[usr:normalized petal length (copy):qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='RowInPane' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:normalized petal length (copy):qk:2]</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk] * [textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk:2])</cols>
      </table>
    </worksheet>
    <worksheet name='scatterplot 1'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Now, when we compute along Species, the data that&apos;s sent to Rserve is split up (according to Species) and thus the clustering happens intra-species, not intra-subject. Bringing this down to a standard X vs. Y scatterplot (not a 2x2) doesn&apos;t make things better... In fact, labeling the data makes table calculations that cannot properly cluster the data.</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Length]' derivation='Sum' name='[sum:Sepal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Width]' derivation='Sum' name='[sum:Sepal.Width:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]'>
            <groupfilter function='level-members' level='[Species]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk])</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='scatterplot 2'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Now, when we compute along Species, the data that&apos;s sent to Rserve is split up (according to Species) and thus the clustering happens intra-species, not intra-subject. Bringing this down to a standard X vs. Y scatterplot (not a 2x2) doesn&apos;t make things better... In fact, labeling the data makes table calculations that cannot properly cluster the data.</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]'>
            <groupfilter function='level-members' level='[Species]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]</rows>
        <cols>[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='scatterplot 3'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Now, when we compute along Species, the data that&apos;s sent to Rserve is split up (according to Species) and thus the clustering happens intra-species, not intra-subject. Bringing this down to a standard X vs. Y scatterplot (not a 2x2) doesn&apos;t make things better... In fact, labeling the data makes table calculations that cannot properly cluster the data.</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sepal.Length]' derivation='Sum' name='[sum:Sepal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Width]' derivation='Sum' name='[sum:Sepal.Width:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]'>
            <groupfilter function='level-members' level='[Species]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='4'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk]</rows>
        <cols>[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='table calc exercise'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_189151187457298433]' derivation='User' name='[usr:Calculation_189151187457298433:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[normalized petal length (copy)]' derivation='User' name='[usr:normalized petal length (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:normalized petal length (copy):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk] / [textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names])</rows>
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='shortcomings'>
      <style />
      <size maxheight='550' maxwidth='1000' minheight='550' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99600' x='0' y='0'>
              <zone h='38000' id='1' name='iris species vs. cluster id' w='99600' x='0' y='62000' />
              <zone h='53636' id='8' name='scatterplot 1' w='99600' x='0' y='0' />
              <zone h='8364' id='9' name='scatterplot 1' pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' w='49800' x='0' y='53636' />
              <zone h='8364' id='7' mode='compact' param='[Parameters].[Parameter 2]' type='paramctrl' w='49800' x='49800' y='53636' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='warmup dashboard'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='95875' id='5' param='horz' type='layout-flow' w='100000' x='0' y='4125'>
            <zone h='95875' id='3' type='layout-basic' w='99600' x='0' y='4125'>
              <zone h='95875' id='1' name='scatterplot 1' w='66400' x='0' y='4125' />
              <zone h='47939' id='8' name='scatterplot 2' w='33200' x='66400' y='52061' />
              <zone h='47936' id='10' name='scatterplot 3' w='33200' x='66400' y='4125' />
            </zone>
          </zone>
          <zone h='4125' id='9' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='4125' id='6' name='scatterplot 1' pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' w='100000' x='0' y='0' />
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='68'>
    <window class='worksheet' name='scatterplot 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='caption' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:nk:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:hopach clustering (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='scatterplot 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='caption' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:nk:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:hopach clustering (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='scatterplot 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='4' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='caption' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:nk:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:hopach clustering (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='warmup dashboard'>
      <viewpoints>
        <viewpoint name='scatterplot 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='scatterplot 2'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='scatterplot 3'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
    <window class='worksheet' name='mega scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='5' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' />
            <card type='caption' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:nk:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:hopach clustering (copy):nk]</field>
          </color-one-way>
        </highlight>
        <floating-toolbar-visibility value='1' />
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='table calc exercise'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='normalized p.w vs. p.l'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='iris species vs. cluster id'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1ce9ihl0y7crwi17t02i80vvb92x].[usr:Calculation_213358033279348736:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Species (group)]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033596588035:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597661188:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597825029:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033616814093:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Petal.Width:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:qk:2]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='shortcomings'>
      <viewpoints>
        <viewpoint name='iris species vs. cluster id'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='scatterplot 1'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk:1]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk:2]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 3):nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='data blending with R'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card mode='type_in' param='[Parameters].[Parameter 5]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 6]' type='parameter' />
            <card mode='compact' param='[Parameters].[Parameter 7]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:address:nk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:city:nk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:country:nk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:formattedAddress:nk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:lat:qk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:lng:qk]</field>
            <field>[mysql.11dbwcn1vr1ye315u9q3g19seb77].[none:row_names:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[attr:address:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[attr:restaurant:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:debug (copy):nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 3):nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 4):nk:1]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 4):nk:2]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 4):nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk:2]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='scatterplot 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='scatterplot 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='scatterplot 3' width='192'>
      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
      VAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='warmup dashboard' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='mega scatterplot' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='table calc exercise' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='normalized p.w vs. p.l' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='iris species vs. cluster id' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='shortcomings' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOydd3gdxdXwf7u3F7Wr3ostF8kFuTewscFU01NIJUASAkkIJCEJyQvv9yWh
      hHwkBAKEkJBQAoQSOtjGYNy7ZUuWLFmSrV6uytXtZXfn++PaMopcJFu2SXx/z+PHulvmnN2d
      sztzZuYcSQghiBHjLEU+0wrEiHEm0R/6Q9M0QqHQmdQlRozTjv7TP3Q63YgL8Hq92O12qis2
      s3NrJQXTptC2o5y5X7mZbKM05HghNPbt3sDqjysJeDpJmX81X1485YSUj0QiGAyGEzr3ZInJ
      Pv0oioJOp0OShtarT3OoTg6HAQOQZRmj0ThipfR6PUajkdzcMVRv2YLekoPDtInWzgiFY4Yq
      EeprYO2GKsypOcw6J5UKVRxVruLx4vxwDcbUZBxzZyDpdIAg6AsiyRout4+szDSOfTtOHSdy
      v2KyTxxJktDr9cc1gEN1cjjoj3/I8Gis2knQno+xbx8tajpXZVmOeJwpqYhbvn8bEL2gWUcp
      TwuHqfjBL0iaWUbf1p24K6spvOXrbHn3n1T1WhDiAMFwKl/5+heIM8S6MjFOjFEzgLJFl1F2
      8O+ZCwQIDSHEgLUKIehdu4mWl/6FY84Mcr5yHRzDkr01dZhSkym45esoXh87b7ydwltuYNal
      y6h9cSVtVfsxJfrp86nEJcYMIMaJMeo1J9zdy84bb2fLdTdS99BjCFUFwFNRTdOzL1P8k+8R
      bO+g5flXj1mOJTcbX0Mjnup9OD9aiyUv++AeHfk5mcxfdC6G+DySrCPvt8SIcQhppOMAzfXV
      aJZM8rMSAXC73cTHxw/sr7r712RccRFJM8vY+38eIm3p+SQvmE3zc6/Q+vIbyEYDOpsVvd3G
      1CceOqYsd+Veyr95J3El45j8yK/R222HdwpBOBI5Y+3RcDgck32aiUQiw+oD/HudPBYj+gIE
      3N2sXbeOnr7AUY9RAwH0cXFIOh16ux01EATAkJSAv7GZjGUXEXG5MSQmDJyjeH24tu8i3Oca
      2KYpCvW/ezJ6QburaP/Xe4MFHecmxBh9FE2hsb8Fb9g3rOM1odHqbqfH33fE/e01u3jq8efY
      ufZNfn3f/WzauYEf33ELqytaR1PtYzKiPkDA48JsMtHZ6cRfmICiKCiKQjgcHjgm75YbqLn3
      N8hxdox2G7nfuYFwOEzY6yPU2c2uW+9CHx+PpTCPcDhMqKOLyu/chSHOTsjZQ8lj92MbU0D/
      9l20vf4uhjg7Qghqfv070r9w5SB9VFUdJPt0crbJDiohfrfhKcx6I93+Xr4146vkJ+aw4oVn
      yZx2LqHmSnzmLDpattMTsnPz16/n+fKX6A70EYgEWFK4gAX5sweVaUtJR7bIjCs7ny0fb8aS
      WkremMnMHpd6xOtTVZXhNFj+vU4eixEZgCN7LFdcm0tElbGYo75gt9s96JNoGDeGou/eRM8n
      G8i94YuY7TaQJGQhiPS5MKWlEO7uRVJVjEYjjS+/ScblSyn8zg20v/k+LU89x+Tf/RKdJpCA
      MXfegruyGufKNUM+vWdrU+BMyN7UtoPi1EKum3g5Ld52Xq18h7vOu5XUgjwiQiVjTBGVB1x0
      1bfhitjp8HXTE+jj7kW344/4+d9Vv2Vx8bmDyjQ6kklzONizfgWKzYFe7SIrbx4W0+BrEwhc
      ATdr92+kyFFASfo4ZOnojZdT6gbVG0zojzEO4lzxMe1vvE/ywnlU3nkPUx57AFNqMoGWdgDC
      PX0ITRv4bUxKpO21t+l4831ks5nE6dFBMcmgRzIaaP77ywhVRWcxH1c3oagceOrvuHZUkHnF
      RaRfvhRJPns9RI012/lkcwWlZXNorKvi3AsuJTXu+PfxSMQZ7fT4+wirEbq83cSb4wCJtKws
      +sI6kjMysbR6SUqJRwnHYZRNBJQggUgAV8CNUXeESiMZuOLKSxBCMHNp1C1emj/0MF/Yz69X
      /56F+XN5p2YlXb5uFo9ZcELX8e8c0QDa2tpobW1l7NixJCUljajAttfeZfy9P8KSnYnq9dGz
      bhNZV18GQoAQyGYTqs8f/Q0YkuLp+WQjOpsV1ecndUn0LRE3cRymZAeqP0DE7SH7C1cNkqMp
      CiKiIAyGgU5R83P/RFNUJv7yp9Te/wimjDSSZk0b8U35T0MIga95Db7m9VizZ2PPX4wkSeSM
      nYq8fj3Ophq2rdmKNa2Yi+dPPiEZUzImUu2s5RerHiDNnsL35t4MQOH4SRQIQURTWLIkDWlJ
      tGJKksSFY8/jng9/g0lv5NuzvjZQli/s5x+7Xqcv0M/nJ19BQVIuEO0zvFezip3tFZxftID5
      eTORJImKjmqmZpSyuGg+s3LL+OPmZ06dAUQiEaqrqykrK8Nmsx3pnGOSOH0qbf98i8yrL6F7
      9XrG/+9d0R2aFhVos6L5A4iDv/vL95B53eVM/NXdNDzyJ/rLKwFQfH6MKQ4c82ehRRRC7Z0D
      MvrLK6n55f9DUxRyv/I5sj93BQCu7bsZc+ctmDPTSV4wG09V7VlhAIGObXRtfACTYzzOzb9F
      1pux5cxHFl48IpsiuZ8ll15AU3v3CcvQyTq+NPUarpt4+aDmRUSN8OSWZ2nobSTBHM9d596G
      1RgdBF1YOI+FhfOGlPXYpr8yP28WWfHp/HHTM9y7+IfYTTZW1q2h3dPJN2d8hWd2vES8yc6U
      jBIKk/J5cM1jvLjrdUx6E5eMX3LC1/HvDDEAp9OJ3+9n9+7dZGdnU1xcPKIC82/+Ms3P/pN9
      v/kjRd/7JrYxBQAc6rqEOp2DjjcmJ9H+5vs0//0lejdsJfncOQD46g9gLcqn5P5fEO7tY+Ml
      Xxw4p/bXv+OcPz+MMJvY8527SF4wG3NmOvk3fYmqu39Fynnz6F69nsmP3jci3T8rqME+urc/
      jhrqx5o5i4QJ1yBJMhFfJ707/4QS8hCXdx7xxcsACHTswDH1JhLGX4un7l387duw5cwHZC6+
      YDGZSSrvrfiEyy+4ZEBGb+duGrc+iqZFyJ70FTKKLji2TprKC7teZ1tLOSk2B3fM/zZxJjtr
      Dmwixergu3NuZHPLDv6x+3VunvHlY5a111nHpubthJQQdqOdLl83dpONio5qrim9lIy4NObm
      zWCvs44pGSU0uVrIissgMy4ds8FEQ++Bk73FAwwxAJ1ORzgcJhKJjLj5A6B4fPRu3IZrWzkJ
      U0pInHEO6KRoM0WSok2fQ38DGVdcRPsb79PzyUaQJHK+dA0AiWWTqet1UfPLhwk0tZB55eGH
      JzSBpNeDLCMZDAglOtiWcM4kSh+8B3fFXqY++RDGpMQTuimjjdBUIp5mdKYkdObD7l8hBIqv
      ExDobRkDTbneimcJ99WjqSH6+1/BnDYZc/J4enc+RaBrN1okQLhvH+b0MozxOegtqXgOfIhs
      sOLZvwJrdvQlIunjKcjTiLhbuOKy89FbrAflalSvf5C/hMwENImvb3uS89KnYrWlHvUadnXs
      wRXo51szvooz0MNz5a9y6+wbCKsR1jdt5bU971KQlEuR43AjXhMaLf3tWAxmUm3JA9u7fT1o
      QkOWZNrcHSha9PktGbOAu1fcR0RTsOjN3L/0bgDCapjs+AzuWnAbNb31PLP9pdF5MBzBACwW
      C3a7nYKCApxOJykpKSMqsO63f6Rn7SYSyiaz994HSSibTNLsaSBEtEMqS4B0uA8QH4/RkYQ5
      KwNfwwGMKdEbpbNaKPvbo3S8+T6J06eQeuGiARmFt36DXbf8CHQ6kufOxJyTCYBQ/WxsbmPx
      Jefy0YYdLDl36Of3dCM0le6tvwdZjxroIXHi5zGnTkIIgafuXdx1bwNgL7yQhPHXIkkSkf5G
      lEAPemsqYVc9ircNkscT6qtHKEFkox3F10HE3YwxPodwxkz27v4HaZsfwamzUjrjjqhsodGz
      40mEGkQNuYkfeznWzBkAdLjbaYzEoSHToXMRCvuOaQCekI91jVsIKSGa+lvJjEsHwKw3saN1
      N3pZR6fXSUnaOCBa+f+89Xl6/H34IwEuGHMei4qiz6M/5CE7PoNki4NN3u34I9FxpWpnHVeV
      XEKiOYH63gPsdzWTm5jN7NxprKpfy23v/AxVqPxwwS2j9nyGGIDZbCYzM5O6ujpmz559pHOO
      iWvbLiY/8ivSlp7Pru/cRX95RdQAIFr5hUDSHfbMtL/xHjlfuoas65bRs34LTX/9B+Pv+REA
      Rkcied+4foiM1CXnkjhtCiG/H1tW9M0phMabr7xGpQfoaWJFQ/dnwgBCvTUIoWJOmoCUUkp/
      7ZtRA1CC9O7+K4q/BxBEvB3EFS5FZ4pHi/jRIn7C/QcQQqBF/AAIJYCmBEEJghAINTrI+GHj
      NrKm305J5gS2Oxt4f/9mvuEoJOw6gNAUUmbegRpy0b31EayZM9AErAzBN4weIsC+CPRogiSi
      X6Vq5z5quuuZmzuD9LgUJKSowYa99Ac99AZcpNvTAKjprmdh4VwKk/Jwh7zUOOsAaHN30ORq
      ZX7+LAw6A29WfzBgADISiqrgDXvRy/qB2bw9/l6KHPkElCB2ow1XoB8Ag87AL86/g+a+VpJs
      iSSYhzfKOxyGGEBLSwuhUIjMzEz0+pHPlbMW5VP9iwfofG8V7W+8R+bVlwIgm80gwJiSTKTX
      hc4cdccZUxz49jeh+gMEDjRjTDv2F0cEnTz1l5dJzD+Hqekeqg7kcc38UjQlgsvZR1trN22h
      NNwtzXhDGnbT6LpBhdAIdlcR9jrR58xGNliPebykM+FrWosadKEG+9Dbom9OoUVQ/E6MCYUg
      SYRd+9GUADpTPMh6ECp6SwoRbyvIB+c7yXpUNYymM6MTKkjR7UmWBFyuRgJyiL7+HpIs0aaf
      bLShhd0IxY/q70bWH9Z1S0RHu96ORWegNtzLDQe3b27Zwf9b+yR2k5U3qt7noYvvIc2egk7W
      oWkaxY5C2r1d6A66lxPNCfy57nlyE7Joc3dydWm0qaqX9ezqqKIkbRyt7g7cIc+A7NzEbHxh
      P6rQsBrMJFujTe2StHHcv/oPJFkS6Av28+jlh/twOllHdvyJ1cljMaS09PR0uru7qaioICMj
      Y9hzKg4x4d4fses7P6bjrQ8o+t7NpCyOuqviSsdjTE5C8fowJCUQP6UkKu/SC6l/+Am2f+02
      7OPGMP6eHx5H43jOXTSLT3bV8fbmXSTOi/YZdAYTN3z/di5xdpKems5SZ+eoV34A97636Nn5
      Z0DC1zCBzEX3Ix3Jx30QNdSPGuzF17wOhIYl45AHJTpjVgsfrBhC45CrQJJkXEoEk68TTYB0
      sKKHBOhNCQg1BAYbh8Y6z03Np3LvC/ytXmGmScek+T8BwGBLx5Yzn8719yEbbDjOuelg+WDQ
      6elWFEQkgkFnQHdwYOntvSuJM9mYlVPGW3uXs7llB8smLKXD00lOQhblHXtwWBLo9EadGXpZ
      N1DJS9PHoT9orIFIkAx7KuXtlehkPTr58KTFO+Z/ix+8ew+dXidfK/scOQlZAOxsq+T3l/8S
      s95MQ28jFZ3VTEwbmRNmpAwxgObmZmpra5k3bx7p6ekjLtCUnsqs1/82ZHvKovkUfe9mejdt
      w5Seypg7vg2AbDRQ/NPvD7v8UG8DP/vVw9z4tVvRxjipbOsYtD89NX3Q/6ONu/Yt0ub+FMmW
      Re+m+wj11WFOmYgQAnfd2/jbtmDPW4S9YAmSJKFFfMgGO6lzf4yv8RMi3ugAIJIOSW9GCfQA
      EpLOiCRFH4ciydiMVoQtA5OrHuVgI0GfMR0aP0RvScUfcGJKngBAuHUjk2fdxuyMaQS7q/C1
      rMWeMh6A7vixvKKrItOWzudMh50CVoMFRVMx6A0EIgEMB43YFXCRZk+h299Hqi2FvoPNkNL0
      CSzft5okSyIBJUBperT8krRiqrpquX/p3bxVvYLilCIA0uwpJFkSuXnGl2jzdLK1pXxA9op9
      n/DgRb8gMy7qBvWEvMSZ7JRlTeKT/Ru5cuJFbG7ZwdUlhx0fp4ohBpCcnExxcTHV1dVYrVYy
      MzNHRZBs0I+ooh8Nc9pE3nwx6gUIh+dw9WmfjiDo2fEEQg2DUAe8WZ769+nZ9ijGpLF0bXwA
      WW/BljsfNBVJb8LTsOLg2/7gW142oLemIemi+muRALIh6j+vw0JxYiF6Uzy9YQ+tkpkkINGa
      hCdnAWElTJw9A7PeBIDJMR5/ywYMcdn4mtdiTp0EgDvk4dGNf+G2Od+gtruBP299ge/OvREJ
      iTR7KgmmOAw6A/v7GrEbo2M+6fY01jduwWFJpMXdzpenXgtEDcZusuEN+zDo9CSYoi2DiWnj
      uHR8kOfKX2VG9lQuGBsdyLQZrdwx/9u8XPEmSZYEvj/3poE72OXrpixrMma9iYy4VJy+HuJM
      dhaPWYAmBM+Vv8rFxecPGNmpZIgBxMfHM21atNPqdrtPuQJaOEzdbx/HtX0XtrGFTPjfu4Y1
      7eFMEnE3Rf+Q9QPNk0BXOcnTbiW++Ar6Kp4l0LULW+58rFmzkI12gp27EEIldebt0XOFCpKM
      4nciSTKy0Y5QI2AA27ireXnNfeTr2qk2ZfKjrOjzCPc3klRyPcFQELlzC+H+Jixpk7FkzkBT
      /PTt/huWjBlYs6OdzZb+dgodeRQ58kmzpfBxw7qoaASJ5nhK08YTViMYdHoCkSBJlqiLdkH+
      LDq9TnISslBF1EVZ213P+YXzuWTsYnpDLp7a+jxXl16KhMSM7KnMyJ466B71djhJc8QxTz+F
      ySVlVG7fyviyucSZdMzOncaTm/9Oqi0ZXzhAXmI2QlPpc/Zz4dgFTLOXgOph7fqNzJ47F5N8
      6mb+DjEAl8tFU1P0ARcVFZ0ywYfofHclOpuV6c8/Qfub79P0zIsU3vqNUy73RFGDLiwZZcjW
      DPyNq9DCXgAMtkw8+1cihIavee3AIJVssJBz0eN4m9dijM/FnHY4AIBQAsSPvQxJ1uOp/2Bg
      ++y8maRc+nsOuJq4M2fawMiqsGbQuuJ2VNmIQSgkTvoSALu3raa6Pcy1l93Jx2vXs7QwWmHG
      OAp4vvw13qpeTqOrhVm5UUOSkJieNQWDzoDdaCWshkmzR93PFxefzwf7PmLZxKWsql83ULGn
      Z0/lwTWPopf07GjfzYVjFx71HnnbG3nwN09w+w+/TsPe3bR0O9EF3eztCPOVqxbzudJlVHbt
      pT/o4ZrSy9DLOta+/hyNSiqTk8OsbwhgDTViyZl0ytd7D+klpqSkoKoqTU1N+HyD530LTaWz
      vR1fYPSm4oZ7XJizMtBZzFhysgh3945a2acCSWdA8fegeFoAacBDEz/uSiRZR2/50+itqdgL
      D42sSujMiSQUL8OSfg7Swc6mEALZYMecUorJMQ6dxYEQ0ekhkiQxNrmAC8acR5zJjnSwGnR3
      7yV19g/JnnYLctYs+pzVAGz9aD0VazbxycoPee2TzQO6mvRGfrrwuxh0BublzeCqiRcPlH/j
      jOsZl1JEkjWJH8z/Fno5+i6cmXMOn598JSElzI8WfIcUmwMAhzWRH597G2E1zHWTlzEn9+hT
      TOyZ+UybOQWLzcGkcUX09amUTCjB3dNH9eZt+CMKCT0w3jaGTaveZ832KuYuuxI9GlMXLyXe
      ZmL6/EXY3A1UNnpH58EdhSOOBAshSE1NxePxDNrn6eugtr4Bj7+eS5eOzmSkzKsvZc+P7qVv
      0zaC7V2UPnTvqJR7qtDbMgj17kNoEZBAb4m+OfUWB5mLf4sa7EVvSTmmZwhANliJH3sp7n1v
      gyRhyzsPnfnYI9cGcwLCGI8+vhC1aTUGc9R9KKwmJo41U7mnCXpacHoVUmwSe7ZVUjguHXeF
      i3FTUnnhuWcpmDSP86aPRy/rmZ8/NCSBJElMSB3LhNSxg7cjkWpL5rJxFwxrqnFJSSlawMOu
      2jZmTpvGtq1bmbtgKW//5Xd8deIEVi9/m0nnzqGq2U/f7pUsOOcWSieMAfRMLhmH5m2m31LE
      4pyRz0cbCUd0qjocDg4cOEBOTs6g7faEVAKe3YwpmYbf7z/igpgRE2dj4h9+jX9/M5bcLHQ2
      67DLOxMLQwQ6jKlT0EJuZEsa4YAbYTo0giqBMZmIKkA9vl7WsddgSJuBEBrGhHwiEeWYx2dM
      vpGmbY8RCfaSXHQxVnsu4XCYSy+/gpbeCJ+fPA5nTzcJRo2ehgZefPst5k3PpSg7j83NQZLN
      EYxx9pO6Z8O95+NLJgLw+evzAJg4PjpC3DVvHpFIhMlz5yHM8cSr+6iPqCiqzPgJRYQjgokl
      xUAxEwGEwiFxp21BTFdXF/n5+Wzfvp2FCxcOBMzq726lNxAhJxjCao26Gf99QcyIEYJVH75G
      evF0Nrz4D8ZMX8yS2ROGdeqZWBhiSZmAMbEQyZaFp/pFLIl5yCehgzFl7PEPOnSsI5/EpQ8N
      ue7swvFkFx78OzPqU08ZM4HSCWMwGCWEJtDLgmZPHJeNyz5S0cPmZO/5zHnnYkuIw1EyGfRG
      zCEf8zKKh1XmcNcEn/SCmMTERA4cOEBxcfEgYUkZhXzxmsJhFTxcmvds4+ONO7mq5GJmz5tC
      xWe8D5A09QbctW8T7qklZfptyMZT+4k+Gc5bcC7pKXGsXLOVSxdOordodJ/dieBIi34tTQnR
      5l7pjDM7XeWIBtDX14fdbsfn8yGf4hVVkYiERQQo37CCT9av54d3/OSUyjtZZJ2JxInXEQ6H
      MZzB6GzDIScvutDk0osvBMCed+xpG2cjQ8KiRCIR2tra2LZtG5dddhlm87F98iMJQXE0FCWM
      qqj4/AGMFht2i2lY551t63LPdtmnJSzKnj176Ovro7CwkNra2hPTdITo9UZMZgsOh2PYlT9G
      jNFgiAEkJCTQ2dmJyWQiNfXo88NjxPhvYEgfoLCwkMLCwkFxPWPE+G/lqD3cWOWPcTZw9gbN
      iRGDmAHEOMuJGUCMs5qYAcQ4q4kZQIyzmhEZgL/fyZv/eoOtu+tPlT4xYpxWRmQAfZ1tjJlQ
      hru94/gHx4jxH8CIDMCWkMieiq2Iz/ia3RgxhsuIogwlpufzuetykOVYYroY/x2MuBMcq/z/
      XQT7u3n6sT/R132Amn01rNu+i6cfegj/wYDDx0IIMawVWp7+biqr6kCE2LhpJ2tWf0TllrV0
      9gfYuGkrCI2Nm7bQ2dpCU+12djUfOafYqWBEBhAJevnko1XUNXWdKn1inARK0MfDP70Xt6eV
      J//4W/759r946Pe/4bl3PjzqOQZrAma7GXNSNv3Ne9lf30NSWhqhI1RsRVNo6m/FG47GKpUk
      aVhTZvR6E/FxNkAmOSmBZKuOum6V5DgjyUlJgERyUhJ61c/GynaK048+lfnZBx9kf5uTd5/5
      M1u3l/PU07/jD8++eFwdjsaIDMDndtJwoJ6a+roTFhjj1CHrjKQUZaOzprNo/iya1q4iZ+6X
      0bxHd1roDAYyUlPpb6lmR2UzSWkO0jMy+ffvfCAS5OcrH+DWd37KN/91J419LcfVxx308Fb1
      crZ0VZKZlQqSgXHjixg7bS76oggv7voXjlwHSBLjxheTnDeOL1xzOVbj0VsZmROKUTSVnJLx
      BDzdmNNLSTAe/2t1NEbUBwj5vWTnjyMcDI3eoviT4GzL1Dgc2akpqfi7G1j50Q5SJs+jff0/
      SMybekxdz7swGsLlxlsOrcUuAaENOmd94xaaXa38eN53WNe8lb/veJmfnvs9NCFYXvcxm1t2
      UOwo4ouTr0Qn64ioER5a9zizssto6DlArbOer5/zeQAe3fQ0sqwj3ZbCvR8+xH1LfoZFb6By
      WyWTZk6lavc2cseX0bKrguJZ5wxUUlVVcaSkgtCIS0wmKAeJ1K7BJWUM0vWUZYlMzZ3A2Mh+
      HBm5WK3RYE0nvSj+JDhbV0YdSbaqqQSUIEuvugKdrOO7d3w6qKw0JK2yqqlUdFYTjISYljUZ
      oz5aXkRVeLXybWq667hgzELm50fzdHkjPianT2Ru3kwMBgPv1nyI0WhkW+su9rua+NF5t7Jy
      3ycsb1jNVSWX0NrbQYI5nmUlSwkpIX624r4Bnbe17eLpqx+OZoXp2kuTp5XcoI63Pv6YvKwE
      /vjSP/nJ98bw2huvcff8WRilaH/DrwSYMmfOQV2zKAJmzZg25PpOWZZIWWegqHjcSE6JcYII
      oYGmHgy/eOx2diAS5JENf6Y34CLOZOfO+d/GZjz6+l8hBH/f+U/e2bsSk97E+JQx/M/5d6CT
      dbxR9T6yJHPbnBt5csvfSbUnMz5lDNOypvDoxr9Q011PU38LP5j3LQCaXK0UJuVR46ynyJHP
      mgMbAUiPS8Xp66aio5oObxfZ8YdjzI5xFPBe7Sqy4tLp9vWQm5hNoimO4qJcqsp3kaAE6Azp
      mDptKoJoso2/bHuRGmcdOlnHD+Z/cyBBx0lP2xcnSX9//8kWccKEQqH/StkRf7doX3OvaPvo
      LtFb8bzQNPXwPm+n8LTvEpqqDGx7rfJd8V7NKiGEEB/VrxMvlL9+zPJVTRVXPvd14Qv7haIq
      4ubX7xSNfc1CCCF++dHDos3dIYQQ4q3q5eL9g+VqQhNVnTXiwdWPiQ9qPxLqQZ1quxvE3Ccu
      E8ue/aqY9fgl4qP6dQNy2t2d4tGNfxHP73xVBCLBge2ekFfc/s7/iCue+5rY190Q3ahpoqWp
      WWiaEM6uZuELqaKtqVkomhCVHXvF79c/JcLhsNjXvV/cv/oPx7y+kdTJ0c02EGNU6Nv9N8J9
      DWgRL6G+eiwZZZhTSvC1bKRrw31oWgRr2lQyFt2HJEcj+R1KHC1L8kCIRYCItx133XsYbOnE
      FV00ELHOpDPyj12vowmBL+zHbIgObl4x8SIe2fBnyrIms7WlnF8s+gEQjQw3MW0cYxILBjUv
      drXvQRMazf1tmHTRJtH5RfMByIhL47tzbhxyfW9Xr2Ddgc2oQuXxzX/jNxf/D3pZT1ZuNusb
      t7CzrYJFhfOYlDsBiWgw316/iye2/J0ESzyC47teh0tsMtwZJNS7j44199DxydQkXS8AACAA
      SURBVD0EnXsGtofdzSiBHnSWZBRvx0BOAVfVixgT8jGnlRHsqSbYXQXAxePOZ1trOT9fcT+r
      92/giokXAaCFfXRvewxr1iyEUOjb8wIQrcwFSXk8vulvPLH5b8iSTLwpDoDJ6RP57pybyLCn
      cc/iO0mwRF2SAkFVVy2PbHqaD2o/RjtoZP1BN1nxGfxx2f1MzSylP3g4oniPv48Xyl/jnb0r
      CX8qUt4zO17ifxbfydNXP0xNdz17D6ZVWndgM1tbdnLh2IW8tuddap3ROWfp9lR2d1SxpXUn
      79Z8OND8GQ2O+AXo7e2lr6+P9PR07Hb7qAmLcRihhnFu+V00zwCC7q2PkHXhI8gGC0INobem
      YLBnEXE3I5RoLjAt7CXsbgRJj1D8A7nDbEYLd0y+hK6mtaTmzMNmigbrCnuaMSbkY0mbjDGx
      COfGB6KyEexo243FYEaSJA64mun29ZKTkElQCfFyxRvsaq/i6tJLuXLiRUiSxP7eJh7Z8Geu
      LbmMDc3b8EX8XFt6GZIk0ebu4ME1j9Ht72VxUTRmbFAJcdcH/5fegItAJEh9byO3z7t54Po/
      rPuEiKagaofDQW5u3snEtGJ2tFUwxpHPro4qxqeOpa5nPwsL52LUGclJyByUbONkGfIFiEQi
      7NixA4itCz4aWtiHFnINaxQUBGrQhbvuPQKduwaaJ5oaJtS7j3D/AcL9TYRc9WhKtELrralo
      ET9qyIXQIuit0YR0QmjRHAJaJJpS6WBZod59uPe8QKLFgaf6ZYIHo0YbEwqIeFrwNq/FXfs6
      5tTDWeK9YT9hNUJEjRBSwihaBIAXyl/DG/LzrVlf5e3q5ZS3R79M21t3MS9vBosK5vGlqdew
      7kA0CnVOfBaa0OgL9KNoCjkJ0c5uo6sFVVN5+uqH+f1lv2R1w/oB2Zlx6axv3MqWlp14w/6B
      HGH5iTk8vukZ2tzt/HX7S+QnRmPT5iVm83LFm/QH3Dy7458DEatHgyFfgJ6eHsLhMJ2dnej1
      +kHZ4gOeXlatWkdm4QSmTx25N0ioKhG3B73NelLxNM8kQWclvRXPIYSGNeMcEku+dMwXhaaE
      6Nr4IJaMMjz7l6P4OokrWgpCQ6jBaH5gJCK+DsSht2FcLkrrRpRgHwIJKS4a71NVggihItTo
      wI96MEukv3UzYdf+aCK+UD++1vWYU0uQ9WZSZv4Ab+PHGOILsOXMBaIZas1qgCuMEYwSfBDW
      Ezkoe293HddPuZrCpFzm5c1kX08D07ImMy17Cr9Z80dy4rJY37yV+fkzAQgoAW6cfj12kw2z
      3kxLfxsQ7WMcyhrZ7ukcSMEE4Al5uXvR7Qih8X7tR/T6XWTGpdPoauHmmV+h3dPJ18o+R6Or
      hdm502hytfKFyVfisCQxNauUjU3bRu15DjEAm802EH3LbDYPCo/S29GA0+MnKRhA07SDN3N4
      80G0UJi99z5IoKUNSZKY9LtfYUxxIISg850VdL6zkuTz5pB9/TXRfMKAZ08NB/70d0zpaRR9
      /2b0cUObY8N7C48ePeVPE/G2I9QIEVc9tpzzMMQfjKItNISmIMmGgdRJwe4qQr21+Dt2oDPF
      o/ic2Asv5FBeMISGQBxMlSRH/d2du0hZ+AAWSyJdtW/jb9+B2Z6FJknIOiPIBrSID/Vg+lJN
      CaC3Z5Jc9i16d/8NLRJACEFT7Q7Wba1m0rTZ7N9ZxbkOFYdNBwi+ZlZYpdkJCpnPmdyYD97L
      aVmTufO9ewlEgliNFp666iGEEBQm5TE/fxY/XflrZudO46cTvosQgvPy5/DgmsfITcxmR28F
      P5j3TYQQ5CZkMSunjJ+vfACdLPOjBd8ZeFaptmQ2N+8g1ZZMh7eLFFu0HpSmj+ev21/EajDj
      C/u5Z/EPEUJQnFzIq5XvcOGYhWxrK2dy+oRjPvfh1kk4QhMoLi7uYN5dwfLlywkGgwP7rPHJ
      2MxG/L4goVB0NFhV1YER4WP961j+Ee49NURCYYROR+1v/4iiKHStXk/36vWM/fkP8O1vouXV
      t1EUhUB3D1V3/xpTbhZqMEjVPQ8MKXO4skfzX8TTis6cjD6+IJqx3dcdHXkMemj75F72v3Yt
      7Rt+QyQUHSmPBD1oYS/G5FJkgx0l6IrqrgkkvRXF14Hi60TSGdGEhKIoGBzj6G9ah8vjJNC5
      G31SMYqiIOlMaJqKUEIIZJAMKIoCeiuSzoinYTmSpEcy2FAUhfT8ErSgk6Z9FWz6aAObd1RH
      ZSsK8TodjZpMh5AJSjpsQkNRFPZ21XHdpMv50jlXMzd3OjVd9SiKwr6uBv6y9QWmZ02huquW
      VyveQVEU7AYbv1h0BwsL5vI/C+8g05aOoii01Tfx/Rlf5Wrz+Txy4QOEy9uprG9EURR+vOBW
      vGEfO9sruH3ut3CYElEUhQO9zSwdu5CyrMnMyZ1Oc18riqKQYIznO7O+zoq61aRak7liwsXH
      fEaapg37eR6xE5ybm4vT6aS0tHRQXtak9EKuuzYPSdYNpK5xu90YDIOTQYS7e/HtbyRh6iRk
      Y3Sf0t2Lc/lH6CwW1FCI3C9di8FgwL+nhrSl52PPzyXzykto/cfrGL5wFf6Wdvo2bceYmECw
      vZNQV/cQOUKIIdtOOUJDqAEkoYJQ0ekkDAYDfXtfwmhPJW3mU/Tu+ivB5o+IL16GjIpsSsCc
      kI0ajifsOoDBYEDV/GghF4kl1wOC/pp/IUsKBoOB7Om30Lb1UdxbHiRtzk+ITx2PhITFloGv
      bx8QdXda4zIwGAwkTbiaro0P4m/dhCEuh6SSz6MzGNBLfjzkMsbo5YLLLqS5qw+DwYAQgulT
      rufaHc/jFzC/aCGJjgJkWY9Op2NG9lTm5s3gkQ1/Rq/XYzAY2NNdy1Ull3DbrG9Q3rmHlyve
      5Etl0RS1BoOBSRmHQ9p72xv5w+N/4porpzG5aCqrVq2kZW87pfOWYDAYGJtSyBNXPjjk1up1
      Os7JnMTMnHN4bc+7A7J7WjooyC5kriiiMGM+mj+Iojdgtx95sE+n0w27XhzRALq7u5FlmYKC
      giEFHW86tGvHbvY98AfiJo5j/6NPM+Xx36C326KpjwSo/gAAoYNh0DMuX8qu235C5zsr8NUf
      oOSB/wEg4vYiSRI6mxVjShKeqpoBGWowSMsLrxPq7SX/61/AlHY4hGPE7SHQ2IJtXBE60+jH
      GdWZElDDHmRDtDkm66NTQhS/E9low1P/QfRN74/m0dWZE1EDTgKd5ajBPoxJh6YoSICEFvGC
      pEMI9eA2CPfWog+5cIy5lNCBFYiMMiS9CTXkImPR/Wjo8TW8i+J3Ykoag2ywkb7gXoQWQZIN
      SIeekYClixeT5Yjw3vI1XHxBNO2oJEnkl93ElzOmoSkBUrJnIR9MkfTNGV/h3lW/4fHNf2Ns
      csGATz/NnsLz5a+SG5/NxpZtpNqSj3qP7Jn5zJg5BQ0Zi8mGUWflphu+ygdvLefWW79+1Lxf
      X5hyJQ+teZzX9rxLijWJ7869CSXo54Ff/Jy7f30TO3oMlL/7GmJfNXO+eDNlE04+3PsRDUCW
      5RNuWx948u+Ee/pofeUtDPF2uldvIOPyC6M9r09z8Le/qQVfbT2SLOOrP4CvroGEqaXo7VYi
      bg/uymqCbR0YEg5Pka35398SVzIOW8l49vz4/zD1yYfQWSz4Ghqp+sn/xVpUQLjLyaTf/RJD
      YsIJXcfRMKVMxF37BgA6SwqG+GgGFFPyeJybH0ZvTUHxO8lY+EsAzCklWNLLkPQWdBYH8WOi
      lVA22IgrvDCaIgmw5S8aSLfkrnuH5Om3YbBn0Ff5AsGu3VizZmJKHk/vrqfR2bMJOytInfWD
      Ab0kWXe44h/aZkigVdrI05tXEZcex3mmIBA1XEmSSc2aPuT6suLTeWzZffgjAeJNcQMJrmdl
      n8OM7HN4ZudLZMWn8+Nzbz3mfZo2bTrZ2cm8t3w1F5+/mO1rP2HpFcuOmfQu3hTHvUt+GO1/
      GCxR2XqYv3QJasiPJbGAiLuJucuWoY7SYNgRDcBkMtHX14fP5yM5+eiWfiQivX14a+tJXjCL
      9tffQ3FH84wdTV3nitVIOh2yyYjOYqbjnZVkXbsMxevDmpeNJMvYxhTiqz8wcI63po4J/+cu
      FAl6V6wm0NKOvbiI/Y8/w/h7fkT85Ik0/e0lOt//iJzrrx6R/scj2LWbtHk/QxUyvrq3CPXV
      YUmbTMTdTNq8nyLUMEJTCLubsQGy3kT6gnvwtW7EEJc9kMNXknWkzvkxlozpIDTsBYuRDr6F
      9ZZUwq56ZKONiKcFW040iYRj6k30VTxLyN1M+oJ70FuPHby409vNyrpP+NnC22nub+Xpbf/g
      7kXHz9Vs0psw6Q9/PSMhP1Xl+7hrwbdY4R/LkqVLqNi5jbipKdiMRx5LLZ4QzfF73XXXAVBw
      /ZePIVFQvfFj9vcZKM01sbW6h0S6aFTMXP+Fz1M6ZSrxBeNI2vICeXOWkhEn0Ayjk+vgiAYQ
      iURwuVwnVGDE4yOxbBJIMnGl44m4Pcc8Xme1EOruJfTxeiSdjuQF0SaFtSAP2Wwi/5tfwVe3
      H9l02G0aVzqe5udfQedIJNLvwZITdROaM9Px7mvAWpSPv6mF5PlDk8CdNLIOQ1wuBksGvrq3
      BiqtNWs2nsZVxBUswV3/PokTrjt4QjRL5KE3/6Ci9Gbix146ZHtCyRfoq3gWT8NybLnnYUgo
      AEBniidlxneHPRPVHXTjsCQRb7KTE5+JJ3TsZ3E0OvdVsWrLTnJTjGzZuYdpRTk8/s83eLBk
      DrZR8mY7crLZ2VxHfFop3l3N2BLNKPVNOPvDFE8qBeCya788rPwAI+GIBjB79mzKysrYv3//
      iAtMmFpCxzsrsebnEGhpJ2FKyTGPF0JgiI9DtpgRijLQ9LLm5zDxV3dTe9/vMGdmMOXR+wfO
      GfeLO2l75S0CTa2UPnTvQGLtwltvYO+9v6H1xX+RfN4ckheOfvqd5Kk30bH2XhACW848TMnR
      N50l4xyQdQQ6y0kYfy0mR/FxSjo6EVXCUnITeklFEboTfuBFjgJUofLw+j/R6+/jsgkXnlA5
      OaVTSd+9n+Si8RRkb6OmqobEsIdmp4dU27EzWw4PieSMLKzGRpLSMrCbzZjCTvxhPWjHP/tk
      GGIALS0t1NfXI4QgLi5uyAlCRKciyUd5KKaMNEypyfgbGrGNKRhogw8cLUmD+gOywYDOZsE2
      ppBAaxvypzrdGcuWkrFs6WD5oR6eeeYlUsfOomx6Bh8d6OGS1GgzTWexMOH+X6DT6VBVFVk3
      +uuXbbnnkps8gZCvD2vK2IG8vyBhSZuC5VOJsE8ELdzPn154nqTEInw9VQTkOG678ZuYdCM3
      Ap0sc+f8W9jf10iCOf6YHdfjlMSSRecCEovPX0hefh6l5y0gbhT7V3pDHFddFX3W1113GUII
      zufUz0YY0oDLyclh4cKFzJ8/n/z8/H/bK1j11svs2tt51AK9e+uY/sITLKnZSN6N1+OtiU50
      SpwxFUmnGxggSpoT7YDlfPlaJL2eUGcXittLwXduOI7GFs5fupDmzhpef/UDOvsPJ1JuqdvK
      z37/V5xte7nzvkeGcfknht6aiiGh4FOVf/TQ/C4697XQuK8SS3Ih+ck2wsrIO3xCC/POi2/g
      bK3mg9dX0rSvjif++DCvfLh15EpJMplZGSBJZGRmAJCSkolJf+oq53DXG58sQ74AXV1dNDc3
      A1BUVDRoX2fDLmpbnYx3uAgGEw8PDkUiA8dkfP5Kqu6+j+T5s+hcuZrJTzxEJBIhceE8pvzl
      9zQ//wqJs8oo/NGt0ZxP6anM+fBVXNt2ET+lBGNq8qDy/p1IXws/v++33PjFm2hxNlBTXUtk
      4WQ0JcSTv38RKTONJx98CikpEU8gjPkUPSRN046p5wljSWHKpAJcIp1ErZuOoAOjpBKJHF73
      OhzZnpYmqjqbYYebpXOnsrVLT7LFzMxzSk5K71N23cNAVYe39ldV1WHrOCRJnqqqbN++nZaW
      FmbOnElubu7APiUcpK1xH/1aCiVjoxO0vF7vkKaSv24/nupaks+biz7h5BLo/TtCjeBye9Gb
      LJj1EkLWY9RHh/f7e/tYuX4tFy44lxVrP+HaZVcjn6KXiKIogwYJTyfDlf3yiy+Rl2WmrrGH
      5HHT6Kht5MavXXVaZJ8Khivb4/Ecsfl+JIYYAMDGjRsJh8OkpKRQWlp6zAJGI0vkifJZW5f7
      WZPt8/mwmAy0dXaTnp5GOKhgs59cVL//+iyRAA6Hg2AwSE5Ozsi1jPGZwWazIeuN5GRnYdDr
      T7ry/zdyRAPo6emhuLiY3bt3D7vdFSPGfyJHNAC73U5VVVUsTWqM/3qOaAAul4u0tDRCoRC6
      U+BLjxHjs8IQA1BVlby8POrr65k4ceKZ0ClGjNPGEAOoqKjA5XJRXFzM3r17B+3TVIWGun24
      vMF/Py1GjP9IjrgirL29HavVOmQmqK+/iz53P+vWbTltCsaIcSoZMg5w6KemaUPa/0rYz/sf
      fMSkGXNJT7QMjASfqdApqqqesT5KTPZnV7bX6x12nRwyrHZokOFIgrz93aiyjqDXhzXr4OKN
      WHDcmOzTxHAHwk5ZcNzE1DyuujxvJKfEiPGZJhYaMcZZTcwAYpzVxAwgxlnNiAzA09PGq6+8
      xtotVadKnxgxTisjMgB3j5MJk2YQ7jt9aSxjxDiVjMgA4pNTqanejjFpdGPtxIhxphiRGzQu
      OYurr7oKWY51HWL8dzBgAKqq4vP5RlyA3+8fVYVGQigUwnQKwh/GZH82ZYfDYfR6/XFfwCOp
      kwMGoNPpTnhp45laEnkml2PGZJ9+vF4vFotlWNMhTmpJ5H8KZvOZW+IXk336MZlMo978PvnS
      hEpjfT3+YAQQdLY10+M6sRB8w5On0FC7j1BExaCX2V+/jw7niYVxPBF8Xg8RRcNoNNDR2kTv
      p+ISnWoCfk/0ug16WhobaG53jmK+xGPj6u6gsbkDo9FIOOClYX8TmnZ6pLt7nexvbEOv1xPw
      9rO3po5Q+OhLdTU1QkNDA6HI8ZfznrQBtNZVsr+zk3WbdxLyuthRXsOmdeuPf+IJUrdrE+0e
      F+u37iHo6uTD1etxeQOnTN6n0SI+Xn75n/QHFILuHsp372PjKbzWTyOUAG+8+k+63GHUcJAV
      y1fQ3XcKXzSDhKvsq2+hfPNafJpg85r1tDfsZX9X/2mQrbGvrpHKbevxqILyzeuoqjuAoh09
      ZmJ7j4fm9jY27Tr+eNVJG0AgGCIjJxtVCRIJhbHFJ6I/hRG9fP4QeYV5hINeIuiZM3salXsr
      Tpm8TyPrrUydNBZNCMLBMPZEB/pjBvwePSSdmXMmj0MTAlVTKZs5j311FacnRZQkk2QCqyMH
      k6ahaBKZyUkEwqchQJYkkWI3orOlYUGQkl1ARoKgoaPnqKdoson09Cwi4fBRjznESRtA/pjx
      tFbXMDY3g9p2F2Y8pBUUnGyxR2XCpKlUbdrJuFwHe5t76eroZNL407R0U5JIz8zFEOmnzunD
      oLhILzr5JA3Dle1Iy8Eqh9hdsx+3y8m4MROQToMBCk2lsa0Lo0GweWc5EycWUN/rpTB9NALj
      Hke20DjQ0obFLLOzYheq0PCHDRSkHz1TZLJZpfVAAxOKxx63/CMGxhoJh7wCQlNRNdDrT89i
      CU1V0JDR605/P15TVTRx+q710whNQ9E0DGcoOlskHMFgPM1pqT4lW28wcLwGxkg8VaN2FyVZ
      h/401kVZpz9jLixZpztjsiVZxnAGByLPVOU/VbLPzGvkLEKoPl5/7X0s9jjOW7wYu9mA39NN
      kHgccUbUgJOaJo0EYz/6OAfbt+9hxoRMap0RFswoZe/eKuzWOPo9LsaXTOYUBmQ+Kxm1JlCM
      IyOUPv741GtkpdhIdCRSd6CFpMR44hMzcLbWkzsmDyEKKCsSrNpeR6C3E6MjDavdhM7npr7D
      TabFQEivIjBx/kXLyEyynOnL+kxz0rFBY4wmEonpWVx46RVYJUhMcpCYmEh/eweqTk9fXx8B
      dz9SYia9B2qZPW82fd1edEoERYXU5DhSUpOxxiczY3Ix3v7T4/I9W4h9AU4xQqj4/GHsNgtK
      OEhXjwtHUgI+r59QJEyc3YZQJUw2K5GgH6vVQiAYjibSUcK4AwrxFgNhZGxmI0h6jIZYtL5j
      MZI6GTOAGP91nFYDOJMJE2LEOBIjqZMnbQAxYvwnE+sExziriRlAjLOaQQYQ9LnZW70Xl+fY
      rrZeZwch5RRnMI4R4zhU7t5Kt+f4E94O4e1pp7q2edC2QT2FD956mTaPnpz8DjLjZdqdbubN
      n8uWDeuYcM4s+lv24QzqkNytFJTNpXL7DubMnUPlzi048icyveT4k49ixBgt6veW8/6Ha5k6
      dzEdu9fRr5qYPjGHrZV1ZI8tQe9uY39bkEVzili9cQ/Tp5SyfvNW1maN5eZvXEfV1o8HG8CE
      CZPo3VpOU3MLVe4u5k7M469/fYawBlUHWjEZDcyZWkrDgU7q330NX1DQ43LReqCeQp+BaSVj
      T9Pk4BgxQNabuGBJGdsq9uJWkhif6KW+uY0JZTPZs7uCJKOK19nKzp1Bllx6Md72JiZPP4/e
      unJCGuyv3Tu4CdTW2kiPx4/Zakb19rB1zwGmTJuGUYJx4ydgUPxs2LoLvdFCQVERQujIL8wn
      NdlBb5/7tK1OihEDoGjsRNJS05k8pYzpYxJQEsYwNj2evZUVLJg7l+zMTEqmncOCJYvYvaOc
      pLRsxhTlMHHKVPTAzAWL/90NKlBVDVnSeHP5Kq64aCmyLKNqKrIkAwIhJOSD2adVVUXW6RCa
      dtpS28eIcSx62hsR9jRS4oY3X2qQAUTcHrqWfzzoAFN6KinnzR1dLU8SJdBDoLN80DaDPQtz
      ymcrp1lLfxtVXbWDto1NLqTIkX+GNIpRvm0bJdNmYDzY9hnUBwi2drD9+m8POiH1woVHNIBQ
      wI+CjM1y+qMEhHr30bnmnkHb4ouXHdcAvG4XIQWSHYdXMvX1dqM3Woiz20Zdz83NO/jV6t8P
      2nbr7BsGDEAIQXNrG7nZWQNfz86uTuITkrCYjPR0d2BLSMFsiI20Hwk17OPFl14hPj2N7v0t
      mOLjad63l6nzF+Jpa6QzKBGn86OZHSTpwzS39BKflk75rq209wX41q3fH/56gKb9tZRXVJFf
      kM+B/Y2oYR+KKQGDGiY3v4C2lmYyMjNwOp2kZeQwc9o5p/Laj8rmzRtJS3VQ39RG0OsjITGB
      7t5e9JLAbDLhD0XQVJXklBT6enqRRBjZYCEUCpGdk0lPn5eLL7wQnXzqmnNCCDZsWE+KI57N
      lfVYNT+W+CT8Hg/CYIyuGfAHcTjikIxWPL0uEuMteAIK55+/GKvpzGRo+awhNBWdwYRJp0Mz
      WpC0INkF2VTu2Y2kRtAwkV80ibR0Hc2NTVjMBhAQCmtkpSQjhBi+AfR0O6murqKmoQYRFqhC
      YIu3sWDRYpa/vxw5HKa/rxNnn4fGls4zZgB6Qjz3yr9IsOoJ+cN4FJlLLjiXdWvWYrZYqNlb
      y/e//33eXfEe5583n9def+f/t3ef/3FV56LHf1OlmdHMaGbUZtRGvdiyjW1cwDZ26MU0Q4CE
      QEggyYGT3NzPzX2fP+Dez/2chEMCGGxsbAzGGNxtueBeJMuyeu9tNL332feFhIgPOSFdEO3v
      G1lLHuvZM/vxXms/a62NJBbihy/9gHd37eH5l17jH3juAzOPoYoGnXx8+SrZObn4vA70iTD5
      ubmca+7FoIyzfMkKWvt7CQsSHlm3jrNnTjE+7eG2lavFBJglT9fyyEMPkJKlsXpFGJlSRTIa
      QqpQEY+EkCiUqNLSkckg6vTg9EZ5/LHNZMhTBCJJTBrFn58A2Tl51NUtI7/QwtjoOIUF+dgd
      dqaGhnnwnnuYHB/DYNCR5fGjN5i+/h/8B1m6fDWRlApztp6u3gFMWTkUFpjxLPKg0+lYuWIF
      fX39rF+7jqkJB089/jipZJKunlGeeuIp8kzGf8pgfvUdG9BmFSOTSUnFItinx7l0uZGVa9aT
      rVNRYCkgXTezCfHgyATlFVXkFyVRK8Xu0JckaPWG2T+rZ75oZr9qb+3Srn/oYe4UJHNryFWz
      P75lEBy12en7P2/c8kJNZSnWV37w94/9bxDzDuPrPXBLW3rWIjKs35mniP64lqkOTvadu6Xt
      juLbWVO44it/d3pqkrHJaerqFs3bgveFSJwNKlrQxMlwogVNTADRgiYmgGhBExNAtKCJCSBa
      0MQEEH3r9LQ10DdqI55I4HY5icViuF0uIrEEfq8HfzBMKODD63Fx7uIl/MEwAhANB/H6fAxf
      v0w8niAajYpbI4q+fUIeF0N9U/TIk6DMBP8UnoSWTI2MeMLHtCdGtl6P0WRkbHgQp9PNY5sf
      4szJ42Rkm/Hc+Bxvhomp/g7xCiD69pGlq1lUU4OQSBD0+xEUcjw+Lykhxuiwk3gkQkqI4fMH
      yCstxzg7YVNKCq8viEymoLnxOijUYiFM9O2WSqZIhW10jEqoq85FEAQkUikIKeDWNSqCICAI
      IJVCKiUglUrEBBB9+31xCv81c7jEMYDoW+9vmbwojgFEC5qYAH8nY/2t7NpXP99hiP6E86eO
      8vrvtuPyR+faxAT4O0lKJHj9wfkOQ/Qn1CxajILELbuXiAnwd1JcbEWVNn/PzxJ9vZOH9zIZ
      iM/eIZoh3gUSLWjiFUC0oM3dBk0mkwSDYh9WtLCIXSDRgib79a9//ev5DCCZTHHkxFU+2n+W
      SZuL6opCkimBvfvP8unhS/gDYcpKLESjMd7/8BSHj19FAIoLc/D6gmzbdZz6M02oVGlYzCZs
      djdvv3eEcxdbyTLqyDLpGRqZ4u3tR7h0rYPighx0Og1tnUO8+/4xmm72UlZiQa1O50pjJzs+
      qKeje4TK8gIUChmnzzWze+9pBoenqKksQiKBg8eu8PGn57DZPVSVF5BMvvaYdwAAGaBJREFU
      ptiz7wwHjlwmFI5SYjUTDkfZuaeeo/XXkEqkFBZk4/EGeHfncU6dbSJDo8Kca2TK5uKt7Yc5
      f6mVnOxMTEYd/YMTbN1xhMsNnViL89BmqLnZNsD294/T3NpHWYkFVbqSy9c62LHnJN29o1SV
      FyCXy6g/08QHH59heNRGTVUxgiDw6eFL7DtwHofLR0V5Polkit17T3Hw6BUi0TglxXkLdlvL
      eU+AxhvdDI/a+OH372NkbJrRMTv9gxNIJVKe3bKRhqZuUqkUF660UVSYw+MP38Gh41cx5xr5
      5OAF1q6q5Z6Ny/ng4zMsqrHy5vbDPP3YBlavqOa9PfUsrrHy9ntHeOn7D1BXW8LWHUepqy1h
      5556fvLDh8m3mNiz7wwV5QV8/Ok5Xn35MZRKOSc/byIjQ83Vhk5++tLD+Pwhmlv78flD2Kbd
      vPDcvfQPTjI97aajZwSVSsl3n7iLi1fbUcjknDnfTHlpPpsfXMunhy5SXJTLnn2fs3HdEjau
      X8buvadZVGPl9+8e4ntPb2LFbZVs313P4lor7+w8yo+ef4BF1TOx19WW8P6HJ/npSw+Tk23g
      48/OU2I189nhS7z68qNIJRLOXmhBqVTQ3NrPKy8+iMvtp71rGIfLh9cb4Pln7qazexSPJ8DN
      tn4y9Rk89fh6Pr9wE7U6nZzszK//sP4FzfsgeGLKSUVZATqthtqqYsYmHIyN26mtLkKn1VBR
      ls/klIspm4uayiJ0Og3Wolxsdg8ut5+yEjOGzAxycww4XT5CoSiF+dlkZ+nRqNNxuX3IpFLy
      cg2Y84ykBAGX24depyHLpKO4IBd/IIzD4cViziJTP/M7HU4fNpubkuI8dFoNi6qLGZ90MDHp
      pLJ8Jt6aykLGJh2MjtlZXG1Fp9VQXprPpM2JbdpDdUUhOq2aosJcpu1uPN4AJcVmjAYtWSYd
      LrePaCxGviWbnOxM0tMVuNw+FAo5uTkGLGYTiUQSl9uH0aDFZNRhLcrF5w9it3sozM9Gr9NQ
      WV7AtMPD1LSLUqsZnVbD4horY+N2xiccVFUUotNqqK4sZHxy5v1dVDMTb1mJhSmba75Pg3kz
      73OB1q+t4zdv7qd/aILevnF+9qNHEASBN7cdpqI8n/7BSf7Hz56gvNTCG+8cpMxqZmjExkP3
      rSKZTPL6WwfIzc7E4w1QVmLhjlW1/ObNT1Gr0tBmqCi1WrAW5/H6W5+REgRqq4ootVqQyWS8
      tf0wPl+IdWsWU1VRyKeHL7F91wnGJx3c950V1FYX839/+zEuj5/e/nFeePZeMvUaXn/rM7p6
      R+ntH+fVH28mFk/w9ntHqCwvYGBwkl+++iQWcxZvbD2ItTiXkdFpnth8J4FAmNff/owso45w
      OEap1cLty6v4ze/3k5amwGTUU2q1YMkz8cbWA8TjSW6rK6fUaiGZbODt947g9gTYcMcSaqqL
      OHD0Mu99cIKRUTuPPLCa8tJ8/t9/fozN7qanb4wf/+BB1Ko0/nPrAVo7Bunrn+C1Vx4lFIrw
      5rZDVJYXMDg0xf98bct8nwbzR/gGCIUjQmv7gODzh+bafP6g0No+IITC0bk2l9sntLYPCrF4
      Yq5tatoldHYPC4lEcq5tdGxa6O0fF5LJlCAIgpBKpYSBoUlhcHhKSKVm2pLJpNDTNyaMTzjm
      XpdIJIX2riFh2u6Za4vG4kJr+4Dg9vjn2oKhmXj9gS/j9fpm4g1HvozX4fIKrR2DQvwP4p2c
      cgpdPSO3xDsyahP6Bm6Nt39wQhgasd0Sb3fvqDAx+WW88URCaOscEuyOL+ONRGNCa/uA4PEG
      5toCwbDQ2j4gBILhuTaPNyC0tg8IkWhMWMj+rDFAOBRCIpXNPRfg7ykeT/DhJ2c5e6mFoeEp
      liwqJZlMsn33CS43dDI97aG2uphgMMI7O4/ReKObQCBMVXkB03YP775/nKbmXgQESq1mhkam
      2L77BDda+sjIUJNvyaK9c5jde0/R3NKH2Wwiy6Tn8rUOPjlwnpvtg5Ra89DrNJw43ciRE9do
      7xqmuqKQtDQlnx26yMmzN+juG2PJolIkwAcfn+H85VZGRqepW1RCPJHk3Z3HuHq9C4fTR01V
      ET5/iHd3HqPxRg+hcJTK8gKmbC627TpB081epFIpJcV5DAxNsn33CZpb+tHrNVjyTLS0DfDB
      vjM0t/RRWJCN0aDjwuU29h+6SGvHEGVWM9oMFcfqGzh28hqd3SPUVBWhVMr55OAFTp9rpqdv
      jKV1pQgpgV0fnebClTbGxh0srikhFovzzs6jXGvqxu32U1NZiFQ6773hefGVBEgl41z8vJ4R
      ux/HeD/dI1Mc3bsDWYaJhquXEBRqrl++gCci0HvzGiM2P0UFZv7amwgXr7QRiyf4yQ8fJhSO
      0NY5SHffGMUFuTz/zN30DUzg9QU5d7GFdWsW8dRjGzh/qRWdVsMnB87z1GPrefi+1ew/dJHy
      Egtvv3eEf//JY2xcv4xdH52isryAHXvq+dUvvssdq2p5893D1FQVsf/QRX7186dZVGNl2/vH
      KSu1cPrsDX71i6cx5xr59PAl1Ko0Bocn+cVPHydNqeDshRbc3gAyqZSXX3gQtzdAb/84Le2D
      VFUU8L2nvkNH9wjhSIxTZ2+waf0ytmxex8mzN8g26dnzyVmee2oTD9xzO/sOnKe8dCbeX776
      JBvurGPHnnqqygvY9dFp/vcvnmbtqlre2HqQ2qqZ7s6vfvFdqioK2LnnJEWFOVy43Mb/+vnT
      ZJn0HDp+BblcxuSUk9deeQyZTMbFq+3Ypt1o1On86Pn7mbZ7GB61cb25lyWLSnl2y0aaW/tJ
      pQQsefO3n+t8+soYIJWI0t7ajE9pAUc3Mn0hMo2e0Zs3MFitXDhzDJfdgTkQIeZ04PL1snbt
      cv7aWTD+QBiTUYdSqSDLpGd0zE5KEKiqKESpVGAy6ggEQgSCYUxGPUqlgkx9BoFgmHAkRqY+
      g7Q0BdoMFaFwlEQiiTZDjUIhR6mUEw5HkUolaNRpc78zHI6SnqYkXZWGAMTiCYLBCFqthjSl
      AoNBSzgcJRAMY8jUolQqyM7S4w+E8ftDZJn0c/F2944SCIbJNpWhVCowGrQEgmGCwQgmgxaF
      Qk6mXkMgGCEajZGp05CepkSjTiccjpJMpsjQqJDJpCjkMsLhKDK5FPVsbClBIByOolKloUpX
      otdpiMXiBEMR9DoNSqUco0FLMBTBH7g13qabvaQpFRQVZM+8lyYdo2PT+PxBsrNmjsGYqSUQ
      +NNPBf1X9pVCWCoR5dK5s0TTszDJg7hiSgyKGILKwMTwIGVVixkb7MKQa8Y5OY4sXcfGu9Yh
      /yu7Rz5/iDe2HiBDk47LE+DVH29GEAR+984hjIYMgqEor/54Mw6Xjx0f1GM0aEkkkrz2yqN0
      do9w8NgVMjQq1Oo0Xn7hQS5caePC5XaUSjmF+dk8/fgGDp+4RkfXMIIgsGxJGfdtWsHuvWew
      2d1EIjG+s2EZq1dW87t3DpJIzqwb3fLoekqtZt7YeoA0pRyH08fLLz5IhkbF7945iDZDhccb
      5N9+vJlEMsnv3zmEyaglFI7x6submbK52LX3NMZMLclUitdeeZSWtkGO1l9Do05Hp9Pw0vfv
      4+zFFq40dCKXyygtNvPE5js5cPQyPX3jJJNJbl9exXc2LGPnnpM43T7C4Sj3blrJimUV/OfW
      AyAIeLxBnnnyLgrzs3lj60HS0xU4nD5++qNHSE9T8MbWg+h1ary+EK++vJlIJM6b2w6RZdIR
      icR59eXNqNX//AedfBN8IyrBsVicqWk3OVmZpKfP7H0fjsSwOzzk5RhRzm4JHgiGcbv9WMxZ
      yGa3ufb6ggSCYcy5xrl+rNPlIx5PkJtjQCKRIAgCdocXiQSyTHokEgmplIDN7iZt9n9tgFQq
      xcSUC51WjU47s812IpFkYsqJyahDM3uSRGNxbNPumVuXs3v1h8NR7E4v5lwjitknugQCYdze
      ABazCdlsbB5vgFAoSl6uYS5eh9NHMpkkJztzLt5phweZVIrJqJuLd2rahSo9DUNmxpfxTjrR
      6zVoM2bijSeSTE45yTLpUatmrnrRaByb3U1utoG02RmroXAUh9OLOc+EQi77h3yu3wbzXggT
      BIGGG90cP9lIPJGgpDgPgLMXWzh9thmFUka+OYtkMsWJ09c5f7kNvV5DdpaeaDTOoWNXabje
      RW6OAUPmTPdj/8GLtLQPUpifjTZDjcvtZ9+B83T3jFJeaiE9Xcn4pIP9By8yPGqjvCwfpUJO
      38AEnx2+yLTDS3mpBZlUSlvHIIeOXSUQnKlISyRwtbGTE6euk0ymsBblIpFIUCjk6HWaucQE
      UCoV6HUapH8wQEpPV6LVqm+pvKrVaWRoVHNtEolk9qqWfkubNkONKv3Lh2NIJBJ0uplu2xdk
      Uil6nWYuCQHkchl6nQb5H5zoc/Eu0MHvF+b96Fs7Bmls6uH5Z+5mZGya85fbOHexhbEJB88/
      czdXG7to7xzm4NHLJFNJnv/u3ew/eJGJKSe7PjpFbk4mWx5dz/ZdJ2a7UwdZtqSMB+65nbe2
      H5nrYm3asIwNd9bx+luf4fOH2PreUR6+fzXVlYW8/d4RPN4AO/bU8/QTd6HXqfnwk88ZHrFx
      9GQDzz9zN8FQhGMnG7jR0sfNtgGef+Zu+gfHudzQOd9voehvMO8J0Ns/zqoV1eTmGNhwRx2d
      3cN0dI9w15115OYYWLW8it6BMXoHxlm/dqZtyeIShoZtjE86uX15FQX52ViLc5mYdODxBqir
      LaGsxIxOp2Zi0olUKqWqvIDqyiISySQTkzNdhJLiPJbWleF0+hgdt1NZVkC+OYvVK2sYHZtm
      YGiSZXVl5OYYuGvdErp6RujpG2PN7TXk5hhYt2YxXT0j8/0Wiv4G814JXnt7LVt3HsXjDdB4
      o4fvPnEXKUFg994zrLytkquNXbzy4oPkm7PYvvsEdbUlNN3s41c/fwp/IMSOD+opLMhhYtJJ
      WYmFxTVWdn10ioyMmS5FWYkZk1HHh598TiqVosCSTVmJmUPHY+w/dAGXO8DSulKqygvYd+A8
      h09cZWBwkrWrarltSTn/8fv9SCQSmlv6uP+e2zEZdGzffRy7w0tDUzfPPfXNeiqN6C8z74Pg
      LwZ8bR1DVJYXUGDJAmBswkFP3xh1tSVkZ808K2tgaJKhERsrl1Wi06kRBIGunlHsTi8rl1Wi
      0aSTTKZoaRsgHImyfGkF6elKYvEEN272IpFIuW1p+dztxus3e9FqVCyuLUEmkxIIhGm80UNe
      roHK8gIkEgkeb4Cmm32UWs1Yi3IBsE27Z4pllYVY8kwLdiblv4J5TwCRaD7N+xhAJJpPYgKI
      FrR5rwOIvvkEQaClfYAP9p4hGIrM1WouXetg32fnkUgk5M+O3erPNHHgyGW0GSqyszJJJJMc
      OnqF46cbycnKJFOfQTQaZ++nZzl/qZUCSxbaDDWBYJidH57ienMPpVYzqnQldqeX9z88SXvX
      0OwKPTmj43Z27jnJ8Oj0XK2mt3+cHXvqcbn8c7WaGy397Nl3hkg0Njd2u3C5jU8OXECnVZOT
      nYnXFxSvAKKv1zcwwfFTjTy7ZRPjkw5On2umoamblrYBnt2yicYbPdxo6ePE6evYHR6e3bKJ
      g8euMDRiY+/+c8jlMrZsXse7O4/h9QXZuuMIRQU53H/3Sn6/7RD+QIj/+N1+Vq+oYt2axbz+
      1qf4A7P1m/XLWFxTwutvfYY/EOKt7Yd55IE1GA1adu45ic3uYffe0zzz5EYi0RgHjlyiq3eU
      M+ebeXbLJgaHpzh3sZXL1zro7Bnh2S2baG7txx8I8ds3PxUTQPT1egfGWbW8GnOekXs3raC1
      fZCO7hE23LkEc56R9WsX09UzSnvnEHdvXI45z8jK2yrpG5hgcHiKdWsWU5CfTU1VEcOjNmx2
      Dytvq6SsxEJutoHxCSexWJzFtSXUVBUhl8sYn3Ci1aioLC9gWV0ZXm+A8Qkn1sJcrEW5rFlZ
      w/iEg8GhSZYuLsWSZ2LjuqX09I/P1GpWzsR791230dY5SEfXMBvXLcWcNzNVZXzCiSAI818H
      EH3zrVhawZvbDiMIAteaunno3lWoVGl8tP9zpqfdXLrWwfee/g4eT4Cde+pZuaySS1c7eO2V
      R5FKYNfeU1SUFdDTN8aWx9azpLaEPfs+J8ukJxAIU2rNo8CSzd5PzyGXSdFp1ZRa85BKJRw4
      colgKEplRQGl1jz2HTjHsZMNjI3bWb60nEU1Vo6dakCv19DaPsi6NYspKc7jnZ1HicUSXL3e
      xaMPrkUml7HvwHnWrKwhEolRas2bmRcm3gYVfR1BEJi2e2i62UdFWT5lJWYARsfttHcOs7jW
      Ole/6RuYoG9ggpW3VZBl0iMIAh1dI0xMOVi9sgadVk0qleJGy8wGA6tXVKPRpBOPJ7jW1E0q
      mWLVimrS0hSEw1GuXe8mLV3BymWVyOUy/IEQVxu7yDLpqastQSqdqdVcbeyiuCiXqopCJMDU
      tJvmln6qKgrmxizDo9N0do+wfGk5uTkGYrH4X34FEFJJQuEYGo3qlvZIOIRcqUIuE4tC/2oE
      QaCje4Tm1j78gdDcBMCbbQO0dQwiCDMLalKpFNebexkcnkSjSWfdGj3hSIzG5h5sNhcmo57l
      S8vx+WcKjoFAGEueierKQlxuP41N3aRSAtbiPArzs5m0uWhs7iFNKae8xDK7xY2Nppt9GA1a
      SmdXxvX0jXGjpQ+H00tJUR5KpZyOrmGaW/sIhSMUFeYgAW629tPRPYzBMLOJgsPp++pdoHg0
      yODIJA6bDZdrmvFpDy7bMINjkwz09iKRK7h+vY140I7dFyPinaZzYIK2G1eRZxhpb25CpUnn
      ypWrZObko1KKvaxvu/auYRqbunnp+fsZn3DQPzTJtN2N3eHhuac2ceNmH+FIjOaWPtJVSp7c
      vI7jJxswGrQcO9lAeamF++++nV17T7Oo2sp7u0+wcd1S1q6qYceeepYsLuWNrQd49slNLKq1
      su39YyxZXMrW947wwnP3UlyYy44P6qmrnXntyy88RLpKydH6Bsy5Rg4cvcLPfvQI/kCYxuYe
      UimBlrYBfvi9+xgcnmJs3M7YuB2vL8izWzZy/UYP+ZYsfv/uwa9eAWQyGZcv1hNXZhIY7SIq
      06HXyigtyON6+yg+fxLP1BjtzR7Kqs2MdfWh0KiJKzWEzp0kKpHQ1tFOLM3IurvE3ZL/Fbhm
      12DodRrKSi1caegkFo1TXJiLXqehqDAHh9OLze5hw5116HUazHkmXG4/bk8Aa1EemfoMsoy6
      ufUbBfkztz/V6nT8/jDxRJK8PCMSAIkEvz+MQiEnJyuTWDxBOBLF7w+j02kwGrUICJw804Tb
      GyA324Bep6G02Exn9whOl48Cy0y8pVYzLe0DpCkVlBTnzU0B9/vDpFLCHx8DeGyTJJRaIp4J
      XFEZhgw5WUYjrS1tFJZWkAjHiAbtCOostLIoE+4Y5qwMNBlaujo6Ka+uIBBJUZSX/c//tER/
      d4lEkh176ukfnESXoebnP3scqVTCW9sOY7N7sOQZefnFh4jHE/z2zc8IBMNUlufz/e/ejcvl
      481th4lEYyxfWsGTm9cxNGJj267jJBNJNm1Yxj0bl9PWOcTuvacBeHLzOlbeVsnFK20cOXEN
      iUTCC8/dS2V5AYdPXOXS1XYUcjkvv/ggljwTH+0/S2vHEGpVGv/2481oM1Rs332CoREbmfoM
      /v2VR5FIJPzu3YM4nD5Wr6jm0YfW0tzaLw6CRX+eaCzO4NAU+RbT3OqzUCjKyNg0xYU5qGZX
      n/n8ISYmnZSWmFHOLspxuX04nD7KSixzC4ZSqRSCICCVSudWwaVSM6eiVCr5StsXrxMEgWQq
      hVQimVtRJwgCyWQKqVQ6t3PJF20ymXRusuJ/bROE/+YKIBL9oS+KRtkmPaPjdn760iMolXLe
      eOcgllwjk9NuXnv5UQLBMO/uPEaBJQuHy8cvfvYE/QMTfHbkEtlZmQSDYX756pZbVs3NNzEB
      RF/r5OdNJBJJHrjndgaHJjlS34AhM4PqykKWL63gamMXI2PTTNlcPPrQWooLczl47Ao6rZor
      DR386AcPkmXUse3946xZVUNtVfF8H9Kcb04qir6xjAYtk1NOQuEoQyM2crL1c1vYhMJRRsft
      ZJlmduIeHrURCkeZnHJizNSi12mYmHAQDEWwO71k6jPm+3BuIV4BRF8rmUxx8Ohlmlv7sZhN
      vPi9+5BKJOz55HP6ByaoLC/g6Sc2kEyk2L77BFM2F8uXVfDw/avx+2dW7bk9AdbfUcem9Uu/
      UQuIxAQQLWhiF0i0oIkJIFrQxAQQLWhiAogWNDEBRAuamACiBU1MANGCJiaAaEH7bxNAEAQa
      m66T+oM6mZCM0tDcMvd9b+t1vJH4PzZCkegf6CuV4FjIzUcHT5GMhVGq0wnYhknTZ+N1BlDo
      dGTq1LjGx4iEktTWFCNVKhkYtXHb8jrO15+gbuMW7l9TO1/HIxL9Rb5yBVCqMsmITiHLLCCe
      CKMyZbOqrgpFuop4KkYkHkadm0tNYSahcBif24veYMA+PkJCJsfucM/HcYhEf5U/OhcoGg6S
      kipJxCNIgKh3ig/3HyO7vI4H1q0EQIaAgAS5Qo7b7UWv1+L1+dFk6ND+lwXzItE31Z85GU4g
      Hk8gk8tvedyPSPRtJ84GFS1o4m1Q0YImJoBoQRMTQLSgiQkgWtDEBBAtaHNbIyaTSYLB4HzG
      IhL904m3QUULmtgFEi1oYgKIFrT/D8JhjgcbtzBSAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='184' name='Sheet 3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='data blending with R' width='192'>
      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
      tvG/MKH5swsUuFQAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
