<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9200.16.0303.2316                                -->
<workbook source-platform='win' version='9.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='9.2'>
      <aliases enabled='yes' />
      <column caption='component' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='3'>
        <calculation class='tableau' formula='3' />
        <range min='1' />
      </column>
      <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
        <calculation class='tableau' formula='&quot;cosangle&quot;' />
        <members>
          <member value='&quot;cosangle&quot;' />
          <member value='&quot;abscosangle&quot;' />
          <member value='&quot;euclid&quot;' />
          <member value='&quot;cor&quot;' />
          <member value='&quot;abscor&quot;' />
        </members>
      </column>
      <column caption='color by' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Petal.Width&quot;'>
        <calculation class='tableau' formula='&quot;Petal.Width&quot;' />
        <members>
          <member value='&quot;Petal.Length&quot;' />
          <member value='&quot;Petal.Width&quot;' />
        </members>
      </column>
      <column caption='locache entry' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;lat&quot;'>
        <calculation class='tableau' formula='&quot;lat&quot;' />
        <members>
          <member value='&quot;timeZoneId&quot;' />
          <member value='&quot;utcOffset&quot;' />
          <member value='&quot;city&quot;' />
          <member value='&quot;country&quot;' />
          <member value='&quot;lat&quot;' />
          <member value='&quot;formattedAddress&quot;' />
          <member value='&quot;dstOffset&quot;' />
          <member value='&quot;timeUntilTomorrow&quot;' />
          <member value='&quot;utcFromTimestamp&quot;' />
          <member value='&quot;timeZoneName&quot;' />
          <member value='&quot;s&quot;' />
          <member value='&quot;rawOffset&quot;' />
          <member value='&quot;lng&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='iris_data' inline='true' name='textscan.1liry6e1vjbszh12mzcn81bghamr' version='9.2'>
      <connection class='textscan' directory='//vboxsvr/docker-Rserve' filename='iris.csv' password='' server='' username=''>
        <relation name='iris#csv' table='[iris#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='real' name='Sepal.Length' ordinal='1' />
            <column datatype='real' name='Sepal.Width' ordinal='2' />
            <column datatype='real' name='Petal.Length' ordinal='3' />
            <column datatype='real' name='Petal.Width' ordinal='4' />
            <column datatype='string' name='Species' ordinal='5' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sepal.Length</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sepal.Length]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Sepal.Length</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sepal.Width</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sepal.Width]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Sepal.Width</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Petal.Length</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Petal.Length]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Petal.Length</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Petal.Width</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Petal.Width]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Petal.Width</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Species</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Species]</local-name>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias>Species</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[iris#csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='locache results' datatype='string' name='[Calculation_1152077082850844672]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(magrittr)&#10;&#10;getLocacheAndConcat &lt;- function(location) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;%&#10;    unlist %&gt;%&#10;    paste(collapse = &quot;;&quot;)&#10;}&#10;&#10;address &lt;- .arg1&#10;address %&gt;% sapply(getLocacheAndConcat)&#10;&apos;,&#10;MAX([textscan.1kt900h04bxgy615sxtd017dr75v].[address]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='hopach clustering' datatype='integer' name='[Calculation_213358033591664641]' role='measure' type='ordinal'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;sepal_length &lt;- .arg1&#13;&#10;sepal_width &lt;- .arg2&#13;&#10;petal_length &lt;- .arg3&#13;&#10;petal_width &lt;- .arg4&#13;&#10;&#13;&#10;# if we had mixed data types, we&apos;d have to write our own distance&#13;&#10;# function, in which case, we&apos;d want to use hopach::distancematrix&#13;&#10;#&#13;&#10;# But, instead, we have all numeric data, so we can call hopach::hopach&#13;&#10;# directly, with various prebuilt distance functions (e.g., &apos;cosangle&apos;,&#13;&#10;# &apos;abscosangle&apos;, &apos;euclid&apos;, &apos;abseuclid&apos;, &apos;cor&apos;, &apos;abscor&apos;)&#13;&#10;dist_function &lt;- .arg5&#13;&#10;&#13;&#10;&#13;&#10;input_matrix &lt;-&#13;&#10;  data.frame(sepal_length, sepal_width, petal_length, petal_width)&#13;&#10;results &lt;- hopach::hopach(input_matrix, d = dist_function)&#13;&#10;results$clustering$labels&#13;&#10;&quot;,&#13;&#10;SUM([Sepal.Length]), SUM([Sepal.Width]), SUM([Petal.Length]), SUM([Petal.Width]),&#13;&#10;[Parameters].[Parameter 2])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='colorization' datatype='real' name='[Calculation_213358033612091403]' role='dimension' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 3]&#13;&#10;WHEN &apos;Petal.Length&apos; THEN [Petal.Length]&#13;&#10;WHEN &apos;Petal.Width&apos; THEN [Petal.Width]&#13;&#10;END' />
      </column>
      <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Species]' role='dimension' type='nominal' />
      <column caption='debug' datatype='string' name='[hopach clustering (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&quot;&#13;&#10;paste0(capture.output(table(.arg1)), collapse=&apos;\n&apos;)&#13;&#10;&quot;, MAX([Species]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
      <group caption='Action (F1)' hidden='true' name='[Action (F1)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[F1]' />
        </groupfilter>
      </group>
      <group caption='Action (Species (group),Species)' hidden='true' name='[Action (Species (group),Species)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Species (group)]' />
          <groupfilter function='level-members' level='[Species]' />
        </groupfilter>
      </group>
      <group caption='Action (Species)' hidden='true' name='[Action (Species)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Species]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\vboxsvr\shared_stuff\tableau\iris_extract.tde' schema='Extract' tablename='Extract' update-time='04/12/2016 01:14:40 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='150' timestamp-start='2016-04-12 13:14:40.668' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>2</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>iris#csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>150</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>11325.0</statistic>
                <statistic aggregation='Avg' datatype='real'>75.5</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>150</statistic>
                <statistic aggregation='Stdev' datatype='real'>43.445367992456916</statistic>
                <statistic aggregation='StdevP' datatype='real'>43.300307928081374</statistic>
                <statistic aggregation='Var' datatype='real'>1887.5</statistic>
                <statistic aggregation='VarP' datatype='real'>1874.9166666666667</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='integer'>76</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1136275.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>2</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint16&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>150.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>150.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Petal.Length</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Petal.Length]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Petal.Length</remote-alias>
              <ordinal>2</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>43</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>563.70000000000039</statistic>
                <statistic aggregation='Avg' datatype='real'>3.7580000000000027</statistic>
                <statistic aggregation='Min' datatype='real'>1.0</statistic>
                <statistic aggregation='Max' datatype='real'>6.9000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>1.7652982332594618</statistic>
                <statistic aggregation='StdevP' datatype='real'>1.7594040657752985</statistic>
                <statistic aggregation='Var' datatype='real'>3.1162778523489774</statistic>
                <statistic aggregation='VarP' datatype='real'>3.095502666666651</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>2582.7100000000005</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Petal.Width</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Petal.Width]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Petal.Width</remote-alias>
              <ordinal>3</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>22</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>179.90000000000012</statistic>
                <statistic aggregation='Avg' datatype='real'>1.199333333333334</statistic>
                <statistic aggregation='Min' datatype='real'>0.10000000000000001</statistic>
                <statistic aggregation='Max' datatype='real'>2.5</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.76223766896034573</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.75969262790215863</statistic>
                <statistic aggregation='Var' datatype='real'>0.58100626398210165</statistic>
                <statistic aggregation='VarP' datatype='real'>0.5771328888888877</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>302.3300000000001</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sepal.Length</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sepal.Length]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sepal.Length</remote-alias>
              <ordinal>4</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>35</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>876.50000000000023</statistic>
                <statistic aggregation='Avg' datatype='real'>5.8433333333333346</statistic>
                <statistic aggregation='Min' datatype='real'>4.2999999999999998</statistic>
                <statistic aggregation='Max' datatype='real'>7.9000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.82806612797784407</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.82530129178512213</statistic>
                <statistic aggregation='Var' datatype='real'>0.68569351230421927</statistic>
                <statistic aggregation='VarP' datatype='real'>0.68112222222219121</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>5223.8499999999976</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sepal.Width</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Sepal.Width]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Sepal.Width</remote-alias>
              <ordinal>5</ordinal>
              <family>iris#csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>23</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>458.60000000000014</statistic>
                <statistic aggregation='Avg' datatype='real'>3.0573333333333341</statistic>
                <statistic aggregation='Min' datatype='real'>2.0</statistic>
                <statistic aggregation='Max' datatype='real'>4.4000000000000004</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.43586628493668372</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.4344109677354801</statistic>
                <statistic aggregation='Var' datatype='real'>0.18997941834450635</statistic>
                <statistic aggregation='VarP' datatype='real'>0.18871288888887633</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>1430.399999999999</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Species</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Species]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Species</remote-alias>
              <ordinal>6</ordinal>
              <family>iris#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;setosa&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;virginica&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>150</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;versicolor&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.241135' measure-ordering='alphabetic' measure-percentage='0.520095' parameter-percentage='0.238771' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='shape' field='[none:Species:nk]' type='shape'>
            <map to='plus'>
              <bucket>&quot;setosa&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;virginica&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;versicolor&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Species:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;setosa&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;virginica&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;versicolor&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
          <calculation class='tableau' formula='&quot;cosangle&quot;' />
        </column>
        <column caption='color by' datatype='string' name='[Parameter 3]' param-domain-type='list' role='measure' type='nominal' value='&quot;Petal.Width&quot;'>
          <calculation class='tableau' formula='&quot;Petal.Width&quot;' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='textscan.1kt900h04bxgy615sxtd017dr75v'>
        <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
      </datasource-dependencies>
    </datasource>
    <datasource caption='restaurants' inline='true' name='textscan.1kt900h04bxgy615sxtd017dr75v' version='9.2'>
      <connection class='textscan' directory='//vboxsvr/shared_stuff/tableau' filename='restaurants.csv' password='' server='' username=''>
        <relation name='restaurants#csv' table='[restaurants#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator='&quot;' text-qualifier=''>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='string' name='restaurant' ordinal='1' />
            <column datatype='string' name=':' ordinal='2' />
            <column datatype='string' name='address' ordinal='3' />
            <column datatype='string' name='F5' ordinal='4' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <hidden>true</hidden>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>restaurant</remote-name>
            <remote-type>129</remote-type>
            <local-name>[restaurant]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>restaurant</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>:</remote-name>
            <remote-type>129</remote-type>
            <local-name>[:]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>:</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>address</remote-name>
            <remote-type>129</remote-type>
            <local-name>[address]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>address</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F5</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F5]</local-name>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias>F5</remote-alias>
            <ordinal>4</ordinal>
            <hidden>true</hidden>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[restaurants#csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;\&quot;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='quote-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='&quot;Restaurant&quot;:&quot;Address&quot;' datatype='string' hidden='true' name='[&quot;restaurant&quot;:&quot;address&quot;]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[:]' role='dimension' type='nominal' />
      <column caption='locache results' datatype='string' name='[Calculation_1152077082853969922]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheAndConcat &lt;- function(location) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;%&#10;    unlist %&gt;%&#10;    paste(collapse = &quot;;&quot;)&#10;}&#10;&#10;getLocacheAndConcat(.arg1)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column datatype='string' hidden='true' name='[F1]' role='dimension' type='nominal' />
      <column datatype='string' hidden='true' name='[F5]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
      <column caption='locache lat' datatype='string' name='[locache lng (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lat&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='locache lat -- bad!' datatype='string' name='[locache results (copy 2)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='// cannot calculate futher than table calculation! =(&#13;&#10;SPLIT([Calculation_1152077082853969922], &apos;;&apos;, 4)'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='specific locache entry' datatype='string' name='[locache results (copy 3)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, .arg2)&#10;&apos;, ATTR([address]), [Parameters].[Parameter 4])'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='debug' datatype='string' name='[locache results (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;paste0(capture.output(str(.arg1)), collapse=&quot;\n&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <column caption='Restaurant' datatype='string' name='[restaurant]' role='dimension' type='nominal' />
      <column caption='locache lng' datatype='string' name='[specific locache entry (copy)]' role='measure' type='nominal'>
        <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lng&quot;)&#10;&apos;, ATTR([address]))'>
          <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
            <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
          </table-calc>
        </calculation>
      </column>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='\\vboxsvr\shared_stuff\tableau\restaurants_extract.tde' schema='Extract' tablename='Extract' update-time='04/11/2016 07:27:04 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh increment-key='' incremental-updates='false'>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='7' timestamp-start='2016-04-11 19:27:04.362' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>7.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>7.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>address</remote-name>
              <remote-type>129</remote-type>
              <local-name>[address]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>address</remote-alias>
              <ordinal>1</ordinal>
              <family>restaurants#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Am Falkplatz 5&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Schönhauser Allee 50, 10437&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;Oberbaumstraße 8, 10997&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>restaurant</remote-name>
              <remote-type>129</remote-type>
              <local-name>[restaurant]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>restaurant</remote-alias>
              <ordinal>2</ordinal>
              <family>restaurants#csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;BBI&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Tommi&apos;s Burger Joint&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>7</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (unique)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.255319' measure-ordering='alphabetic' measure-percentage='0.451537' parameter-percentage='0.293144' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='locache entry' datatype='string' name='[Parameter 4]' param-domain-type='list' role='measure' type='nominal' value='&quot;lat&quot;'>
          <calculation class='tableau' formula='&quot;lat&quot;' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <actions>
    <action caption='Highlight1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='scatterplot' />
      <command command='tsc:brush'>
        <param name='exclude' value='scatterplot' />
        <param name='field-captions' value='observation id' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Highlight2' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 2' type='sheet' worksheet='Sheet 5' />
      <command command='tsc:brush'>
        <param name='exclude' value='Sheet 5' />
        <param name='field-captions' value='observation id' />
        <param name='target' value='Dashboard 2' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='iris species vs. cluster id' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='restaurants' name='textscan.1kt900h04bxgy615sxtd017dr75v' />
          </datasources>
          <datasource-dependencies datasource='textscan.1kt900h04bxgy615sxtd017dr75v'>
            <column caption='Address' datatype='string' name='[address]' role='dimension' type='nominal' />
            <column caption='locache lat' datatype='string' name='[locache lng (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lat&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column caption='debug' datatype='string' name='[locache results (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;paste0(capture.output(str(.arg1)), collapse=&quot;\n&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column-instance column='[address]' derivation='None' name='[none:address:nk]' pivot='key' type='nominal' />
            <column-instance column='[restaurant]' derivation='None' name='[none:restaurant:nk]' pivot='key' type='nominal' />
            <column caption='Restaurant' datatype='string' name='[restaurant]' role='dimension' type='nominal' />
            <column caption='locache lng' datatype='string' name='[specific locache entry (copy)]' role='measure' type='nominal'>
              <calculation class='tableau' formula='SCRIPT_STR(&apos;&#10;library(httr)&#10;library(magrittr)&#10;&#10;getLocacheItem &lt;- function(location, entryName) {&#10;  # UTC time from 21-04-2016 19:30:00:&#10;  timestamp &lt;-&#10;    strptime(&quot;2016-04-21 19:30:00&quot;, &quot;%Y-%m-%d %H:%M:%S&quot;, tz=&quot;Europe/Berlin&quot;) %&gt;%&#10;    as.POSIXct %&gt;%&#10;    unclass&#10;  &#10;  # example return:&#10;  #   {&#10;  #   &quot;timeZoneId&quot;: &quot;Europe/Berlin&quot;,&#10;  #   &quot;utcOffset&quot;: 3600,&#10;  #   &quot;city&quot;: &quot;Berlin&quot;,&#10;  #   &quot;country&quot;: &quot;Germany&quot;,&#10;  #   &quot;lat&quot;: 52.5466863,&#10;  #   &quot;formattedAddress&quot;: &quot;Am Falkpl. 5, 10437 Berlin, Germany&quot;,&#10;  #   &quot;dstOffset&quot;: 0,&#10;  #   &quot;timeUntilTomorrow&quot;: 21300,&#10;  #   &quot;utcFromTimestamp&quot;: &quot;1970-01-01 00:20:34 UTC&quot;,&#10;  #   &quot;timeZoneName&quot;: &quot;Central European Standard Time&quot;,&#10;  #   &quot;s&quot;: &quot;Berlin&quot;,&#10;  #   &quot;rawOffset&quot;: 3600,&#10;  #   &quot;lng&quot;: 13.4058228&#10;  #   }&#10;  httr::GET(url = &quot;http://locache.herokuapp.com&quot;,&#10;            query=list(location=location, timestamp=timestamp)) %&gt;%&#10;    content %&gt;% `[[`(entryName) %&gt;% as.character&#10;}&#10;&#10;getLocacheItem(.arg1, &quot;lng&quot;)&#10;&apos;, ATTR([address]))'>
                <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                  <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
                </table-calc>
              </calculation>
            </column>
            <column-instance column='[locache lng (copy)]' derivation='User' name='[usr:locache lng (copy):nk]' pivot='key' type='nominal'>
              <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
              </table-calc>
            </column-instance>
            <column-instance column='[locache results (copy)]' derivation='User' name='[usr:locache results (copy):nk:1]' pivot='key' type='nominal'>
              <table-calc ordering-type='CellInPane' />
            </column-instance>
            <column-instance column='[specific locache entry (copy)]' derivation='User' name='[usr:specific locache entry (copy):nk]' pivot='key' type='nominal'>
              <table-calc level-break='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' ordering-type='Field'>
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[restaurant]' />
                <order field='[textscan.1kt900h04bxgy615sxtd017dr75v].[address]' />
              </table-calc>
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='511' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk]' value='180' />
            <format attr='width' field='[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]' value='128' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <tooltip column='[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk:1]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk] / ([textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk] / ([textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache lng (copy):nk] / [textscan.1kt900h04bxgy615sxtd017dr75v].[usr:specific locache entry (copy):nk])))</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 5'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 6'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>&lt;</run>
            <run>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</run>
            <run>&gt;</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
              <calculation class='tableau' formula='&quot;cosangle&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='hopach clustering' datatype='integer' name='[Calculation_213358033591664641]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;sepal_length &lt;- .arg1&#13;&#10;sepal_width &lt;- .arg2&#13;&#10;petal_length &lt;- .arg3&#13;&#10;petal_width &lt;- .arg4&#13;&#10;&#13;&#10;# if we had mixed data types, we&apos;d have to write our own distance&#13;&#10;# function, in which case, we&apos;d want to use hopach::distancematrix&#13;&#10;#&#13;&#10;# But, instead, we have all numeric data, so we can call hopach::hopach&#13;&#10;# directly, with various prebuilt distance functions (e.g., &apos;cosangle&apos;,&#13;&#10;# &apos;abscosangle&apos;, &apos;euclid&apos;, &apos;abseuclid&apos;, &apos;cor&apos;, &apos;abscor&apos;)&#13;&#10;dist_function &lt;- .arg5&#13;&#10;&#13;&#10;&#13;&#10;input_matrix &lt;-&#13;&#10;  data.frame(sepal_length, sepal_width, petal_length, petal_width)&#13;&#10;results &lt;- hopach::hopach(input_matrix, d = dist_function)&#13;&#10;results$clustering$labels&#13;&#10;&quot;,&#13;&#10;SUM([Sepal.Length]), SUM([Sepal.Width]), SUM([Petal.Length]), SUM([Petal.Width]),&#13;&#10;[Parameters].[Parameter 2])'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='Attribute' name='[attr:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='Attribute' name='[attr:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Length]' derivation='Sum' name='[sum:Sepal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Width]' derivation='Sum' name='[sum:Sepal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-field='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok:2]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:2]' />
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:F1:ok]' />
              <tooltip column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#404b73' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' x-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:2]' />
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:F1:ok]' />
              <tooltip column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#404b73' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' x-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:2]' />
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:F1:ok]' />
              <tooltip column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#404b73' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk])</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_189151187457298433]' derivation='User' name='[usr:Calculation_189151187457298433:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
            <column-instance column='[normalized petal length (copy)]' derivation='User' name='[usr:normalized petal length (copy):qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:normalized petal length (copy):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk] / [textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names])</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 8'>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='normalized petal length' datatype='real' name='[Calculation_189151187457298433]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Length]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column caption='normalized petal width' datatype='real' name='[normalized petal length (copy)]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&apos;&#13;&#10;petal_length &lt;- .arg1&#13;&#10;(petal_length - mean(petal_length))/sd(petal_length)&#13;&#10;&apos;, SUM([Petal.Width]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column-instance column='[Calculation_189151187457298433]' derivation='User' name='[usr:Calculation_189151187457298433:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='RowInPane' />
            </column-instance>
            <column-instance column='[normalized petal length (copy)]' derivation='User' name='[usr:normalized petal length (copy):qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-type='RowInPane' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:normalized petal length (copy):qk:2]</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk] * [textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_189151187457298433:qk:2])</cols>
      </table>
    </worksheet>
    <worksheet name='iris species vs. cluster id'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>&lt;</run>
            <run>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</run>
            <run>&gt;</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='hopach distance function' datatype='string' name='[Parameter 2]' param-domain-type='list' role='measure' type='nominal' value='&quot;cosangle&quot;'>
              <calculation class='tableau' formula='&quot;cosangle&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column caption='hopach clustering' datatype='integer' name='[Calculation_213358033591664641]' role='measure' type='ordinal'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;sepal_length &lt;- .arg1&#13;&#10;sepal_width &lt;- .arg2&#13;&#10;petal_length &lt;- .arg3&#13;&#10;petal_width &lt;- .arg4&#13;&#10;&#13;&#10;# if we had mixed data types, we&apos;d have to write our own distance&#13;&#10;# function, in which case, we&apos;d want to use hopach::distancematrix&#13;&#10;#&#13;&#10;# But, instead, we have all numeric data, so we can call hopach::hopach&#13;&#10;# directly, with various prebuilt distance functions (e.g., &apos;cosangle&apos;,&#13;&#10;# &apos;abscosangle&apos;, &apos;euclid&apos;, &apos;abseuclid&apos;, &apos;cor&apos;, &apos;abscor&apos;)&#13;&#10;dist_function &lt;- .arg5&#13;&#10;&#13;&#10;&#13;&#10;input_matrix &lt;-&#13;&#10;  data.frame(sepal_length, sepal_width, petal_length, petal_width)&#13;&#10;results &lt;- hopach::hopach(input_matrix, d = dist_function)&#13;&#10;results$clustering$labels&#13;&#10;&quot;,&#13;&#10;SUM([Sepal.Length]), SUM([Sepal.Width]), SUM([Petal.Length]), SUM([Petal.Width]),&#13;&#10;[Parameters].[Parameter 2])'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='Attribute' name='[attr:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok:1]' pivot='key' type='ordinal'>
              <table-calc ordering-field='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_213358033591664641]' derivation='User' name='[usr:Calculation_213358033591664641:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <lod column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[attr:F1:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#404b73' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</rows>
        <cols>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='scatterplot'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Now, when we compute along Species, the data that&apos;s sent to Rserve is split up (according to Species) and thus the clustering happens intra-species, not intra-subject. Bringing this down to a standard X vs. Y scatterplot (not a 2x2) doesn&apos;t make things better... In fact, labeling the data makes table calculations that cannot properly cluster the data.</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='iris_data' name='textscan.1liry6e1vjbszh12mzcn81bghamr' />
          </datasources>
          <datasource-dependencies datasource='textscan.1liry6e1vjbszh12mzcn81bghamr'>
            <column aggregation='Sum' caption='observation id' datatype='integer' name='[F1]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Petal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Petal.Width]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Length]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sepal.Width]' role='measure' type='quantitative' />
            <column datatype='string' name='[Species]' role='dimension' type='nominal' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Species]' derivation='None' name='[none:Species:nk]' pivot='key' type='nominal' />
            <column-instance column='[Petal.Length]' derivation='Sum' name='[sum:Petal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Petal.Width]' derivation='Sum' name='[sum:Petal.Width:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Length]' derivation='Sum' name='[sum:Sepal.Length:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sepal.Width]' derivation='Sum' name='[sum:Sepal.Width:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]'>
            <groupfilter function='level-members' level='[Species]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Action (Species)]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' y-axis-name='[textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]' />
              <color column='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Width:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Sepal.Length:qk])</rows>
        <cols>([textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Width:qk] + [textscan.1liry6e1vjbszh12mzcn81bghamr].[sum:Petal.Length:qk])</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='550' maxwidth='1000' minheight='550' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='99600' x='0' y='0'>
              <zone h='38000' id='1' name='iris species vs. cluster id' w='99600' x='0' y='62000' />
              <zone h='53636' id='8' name='scatterplot' w='99600' x='0' y='0' />
              <zone h='8364' id='9' name='scatterplot' pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' w='49800' x='0' y='53636' />
              <zone h='8364' id='7' mode='compact' param='[Parameters].[Parameter 2]' type='paramctrl' w='49800' x='49800' y='53636' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='50000' id='1' name='Sheet 4' show-title='true' w='100000' x='0' y='0' />
          <zone h='50000' id='3' name='Sheet 5' show-title='true' w='100000' x='0' y='50000' />
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='48'>
    <window class='worksheet' maximized='true' name='iris species vs. cluster id'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1ce9ihl0y7crwi17t02i80vvb92x].[usr:Calculation_213358033279348736:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Species (group)]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033596588035:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597661188:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597825029:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033616814093:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Petal.Width:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:qk:2]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='3' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:2]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1ce9ihl0y7crwi17t02i80vvb92x].[usr:Calculation_213358033279348736:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[Species (group)]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033596588035:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597661188:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033597825029:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033616814093:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Petal.Width:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:qk:2]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='scatterplot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='2' param='[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card type='caption' />
            <card mode='compact' param='[Parameters].[Parameter 2]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Calculation_213358033612091403:qk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:nk:2]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:Calculation_213358033591664641:ok:1]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[usr:hopach clustering (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='iris species vs. cluster id'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='scatterplot'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='7' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card mode='compact' param='[Parameters].[Parameter 4]' type='parameter' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:address:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[none:restaurant:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk:1]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk:2]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:Calculation_1152077082853969922:nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy 3):nk]</field>
            <field>[textscan.1kt900h04bxgy615sxtd017dr75v].[usr:locache results (copy):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:F1:ok]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Sheet 4' />
        <viewpoint name='Sheet 5' />
      </viewpoints>
      <active id='3' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[:Measure Names]</field>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1liry6e1vjbszh12mzcn81bghamr].[none:Species:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='iris species vs. cluster id' width='192'>
      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
      52v4BTC28wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='scatterplot' width='192'>
      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
      QP8PtNpvubBCdYgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      M6/5v4T9BFjpIWDaAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='184' name='Sheet 3' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAOEElEQVR4nO3ce3CU13kG8Gdv2tVetdqbLgjdL6wEyCYYsBEIARYQEceJp3XGzdRtJg1p
      XNs4YBdKCE5skrZupo5bt5l0aJPUbWxqhuCAbQrGjsGGGAgCK+IijLhJCCQkELrvpX+s+PY7
      WtHGE6M08z6/v+xnvjmrPceP2fNKwhCPx+MgEsr4u/4CiH6XWAASjQUg0VgAEo0FINFYABKN
      BSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABLNfDsXHxgYwODg4O18
      CaLfym0twODgILxe7+18CaLfym0twE3xeBxDkZiSWc1GxOLASDSZGw0GpJmNGInGEI0lf1ff
      bDLAbDRiaCSK+Jg14nFg+DdZw2iA2WTEUCQK/V8DkGZOfAoc1n19BgNgNZsQicYQGWeN4UgU
      Mf0aJiNgGLMGAKvFhEgshkg0+bDJaIDFZMRwJIaY7guxmIwwGpCyTzaLCdFYXNmnj7vGx9lr
      i8kIk9Ew7l7/xuf1Cez1RJ3txBQAQMU33lCyYxvuxb6WLqz490NaNqfIh//8s9l46tWj2HL4
      opZ/c3kYf3JPIWY8sws3hiJa/t5f1uFMZx8e+pcDWlaV48bPH63BM9ub8aP3WrX8icVleHRh
      KWr/9m20X0t+LHvj8RqMRGJY/g/7tCw/0453nlyA53efwgtvtWj5l2sK8VefDqPhhb042XFD
      yzevmIOA04ra597WMq/dgl+tvxeb9p7Bxh3HtfwPZ+bhrz8/DV/44X4cOtut5Zse/hSmT8rA
      jGd2aZnZaEDLxmV45eB5rNlyTMuXTc3Giw/dia/85CD2nLii5c8/WI2lVdkpe938rSXYfbwD
      j/zHr7SsptSPn3xpFr7+SiO2NbZp+bc/W4Uvzs7H9Kd3YlD3H86BtQtx/FIv/njTL7WsOi8D
      W792DzZsa8JLB85p+ZP15fjzBSWY+909uHJjSMt3PTEfvYMjuP/F97SsOODA7q/X4rmdJ/HP
      75zW8r1PLcD5qwP4wg/3a1k4240dj9Vg445m/Ou+Vi1/fFEpHl9Uhrrn3sHFngEtf/2xGkRj
      cTS8sFfL8rzpePepOnz/rRZ8f/cpXoJJNhaARGMBSDTD7fyb4bq7u+H1ej/+JTgSQzSeeskZ
      HIn+n2vcvOTc8qI05nI37kUJiQvs2DVuXj5TLlvjXIKBxAV27OXuVmv8b5fgsRfpm/v0SVyC
      x65xc+DwSez12DXSzEZgzMX2Vns93iX4kzzbCb0EA8Cu5g7l3+srs9B5Y0i5CPocVswp9qGp
      /ToudPdreWWOB4V+B94+cQWRWPLNLKwIoW84gv0fdWmZJ92CmtIATlzqRWtXn5aXh1woDbmw
      t6UTA7qDmVcaQCwex96WTi2zp5lRVxHER1f6cOpyr5YX+Z0I57ix/6Or6B0c0fK7i/2wmo3Y
      c+KylqWZjLi3Mgtnr/ajuf26lk/OtGPapAwcbO1Gd/+wls8syESG3aLsk8FgwKenZqOtewBH
      L17T8mxPOmbke3HkfA8u9yYv9HfkeZHtsaXs9dKqbHRcH8Thc8m9DjitmFXkw4dt19CmuzhW
      5XpQ4HNgz/HLyv+EFk0J4frgCH555qqWZdjTMLfEj+PtvTh7NbnXFVlulASdePdUJ4Yiyb2u
      LQtiJBbDPt1eO61m1JYH0XL5Bk5fSQ4W6iqCGBiO4n3d2bptFswrC+BkRy/OdCZfryzkQtkt
      zjYO4N1TyUGBPc2EuooQTo+e7YRNgfQTCCAxBWo8f03J5xT5MKfYhx+/35oyBSr0F2LV5sZx
      p0D6Napy3KgpDWDzoQspU6DSkAvrtn447hRIv0Z+ph11FUH8/GhbyhQonBPGs9t/Pe4USL+G
      127BvZVZ2N3ckTIFmjYpA9/775PjToH0a5iNiQLsO92VMgWake/FP73dMu4UaOxeN38rhMPn
      ulOmQLOKfPi3fa0pU6ACnwMrXz4y7hRIv0Z1Xgbmlvjx0w/OpUyBSoIlWLvl2LhTIP0axQEH
      asuD+NmRtnGnQPpnw9luzCsL4L8OXUiZApWFXFj/s6Zxp0D6NfK86airCGH7sXZOgYhYABJt
      Qj4CGQDMLfErmclogN+ZpuThHDeAxGc6fZ6TkQ4AmFPsw8Bw8jOe1WxEht2iPFvgdwBI/NGq
      zydn2gEAdxVmoutG8rO3I82MiDmuPBtyWwEA+T67khf6nQCAOyd7EXTZtNxts8BmMSnPumyJ
      rc3NUNcoDSbWmD7Jg3SLScsz7WmwmIzKsyajAQCQ5bYp+ZQsF4DE3WhEdzkOuKwwGlL32mgE
      /E6rklflegAA5VkuzO1L5tmexPu6u8SvXB7TzEZ4x+x18eh7KQk6lTxvdK9nFWWipz95V7Kn
      Jd6veraJ1yv0q/tkNZvgGfN6+b7EukV+57hnO7PAi8IbDi13pJkRi6tnG3CNnm1m4vUmZApE
      9P/VhP0s0MqXjyjZdz4/Dac6erFp7xktKwm68EhdCV7afxYftCanDZ+7cxLmlQXw1KtHMaS7
      5X9zeSWu3BjCi3uSF9VJXjtW1Zfj1UMXlNv/0qnZqK/MwoZtTejRTV+eXFKBaCyOv9t5Qsv8
      TivWNYSx41g7djZd0vIFFUHcV52L775+HJeuJS9bjy4shctmwbPbf61lDqsZz94/FW8dv4xt
      R5IX+tlFPjx412Q8v+ukMsn48rwi5Gc6sG5r8rJrNBrwvT+oxvunO/HyB+e1vDovAw/fU4gf
      vHNamTB9cU4Bpud5sOqVRmWv/+aB6Whqu6YMBcqz3PhqbTF+/H4rDusu4w98Kg9zS/xYvblR
      GXk+fV8V2noG8APdRTXf58DKxWV45eB5vKeb7DRMy8GicAjf2PqhMi1bs2wKBoaj+PtdJ7Us
      6LZh7bIpeK2xDbt106v1yyvR1TeEf9QNIXK9dqyuL8eWwxfwi5PJs11SlY0lVVl4+rUmdPcl
      z3b1kgrE43E892bybDOdVqxvCOP1Y+14s+nSxE2Bth5pU7Jvf7YKbT2DSj6nyIdH6kpw6Fy3
      kk/Py8C8sgC2H21XpkBPLqnAld4h5dmqHDdW1Zfj6MVrSl4UcKK+MgtvNl1SpkAraosxEokp
      z+Zn2rGuIYzm9utKHnBZcV91Lt463qFMgR6anQ+jwaA867Vb8Oz9U9FyuVfJrRYTHrxrMn5x
      qlOZAn2mOgdZbpvyrHm0AK1d/Uo+HI3j4XsKsf+jLmUKtKAiiKm5npS9/s7npuFiz4CS15QO
      46u1xTjY2q1MgWYUZGJuiR+vNbYpU6A1y6bg8pi9rs7LwMrFZWg836PkZSEXFoVDeOPDS8oU
      6JG6UvQOjijPFgccWLtsCpra1L1eVV+Ozt5hJQtnu7G6vhzHxpxtgd+BJVVZ2NnUoUyBvjK/
      GNFYXHk2z5uO9Q1hNF9KnAsvwSQaC0CiTdgUaMNnKpXMajZhSrZLyW9OIO6/IxfTJmVo+azC
      TADA2mUVGNZNPdzpFhQFHMoaPkcaAGBZVRYK/cmJwB15ifWeWFyGPt0kKeSyIRqPK2u4Ryc4
      dRVB+JxWLa8cnVJ9bUEJunXTjcmZdqRbTMoattFvw99d7FfystHJyZfmFmL59JxkHnLBYTUr
      z44OgTAj36vkBaPTkIdm52N+eVDLp+Z6YDIaUvbaYjKgMsej5Lmj05cHZkzCnfnJQcXMgsQ/
      r2sIKz/C4bKZURJwKmsERvemYVoOSkMuLZ8xObHG6vpy9OvubAGnFZ50i7KGJ90CAFgcDiHL
      k5ysZaSnwew3jnu2S6uyke9Lnm316NmuXFymfEQOuW2IjzlblzVxtgvKA8h0pHEKRLJNyJ8A
      sXgcUze8qWT71yzEgTNX8dhPk9+mnlXow6aHZ2LNlmPY1picnKxZOgV/NDsfszaqvxCz64n5
      ONfVjz/90QdaFs52Y/OKu7FxRzNeOnBWy/+irhQr5hffjrdHv8cm7Ifh+oaiKVkkGlfym9/k
      GopElfzmOK5vSM3jcSASu9UaMSUf+5OaRAAvwSQcC0CiTdgvxLT1qH8/UHaGDUMjMVzVfefO
      ajbC77Kiu28Y/bpJjcdugdNqRlvPgPJLJCGPFdFoHJ26n+2xmAwIum3o6R9WPgK50s1w2yy3
      4V3S7zNOgUg0fgQi0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg
      0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKN
      BSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgA
      Eo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDR
      WAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0F
      INFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAAS
      jQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFY
      ABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg
      0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINFYABKN
      BSDRWAASjQUg0VgAEo0FINFYABKNBSDRWAASjQUg0VgAEo0FINH+B+erfhZUCgJeAAAAAElF
      TkSuQmCC
    </thumbnail>
    <thumbnail height='104' name='Sheet 5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 8' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO2dd3Qc133vPzOzFWUXZVEJgAAIFrBIYrdcZPViO27PcSLnOXl5eU6zkxy/
      JHaUOM+yk+P04jyXJ8dy4h47iSKJ6oUqpEQSFMUGAiCIXhfAYgsW22fmvj9AwKKIRmBnscTO
      5xydQ1KY+/vNxXznzr33d38/SQghMDHJUeS1dsDEZC0xBWCS05gCMMlpTAGY5DSmAExyGlMA
      JjmNKQCTnMYUgElOYwrAJKcxBWCS05gCMMlpTAGY5DSGCCAajRrRrIkJkN7nyxSAyXVH1gvA
      ZHmkEgn0tXYixzEFkAF0NUnAP0kknkRLxfFPThJPJXnqX/6VoYRKZCpAMBxFm/u5FGoiyuTk
      zJ/NAxvGYVlrB3KB4dbXeerNS5SU76BM9NIfiCO564mMjFA7dJHDr57BaYOqDSVcaB/C03gj
      NzfZOHX8DQLuG/jkBw6grPVNrFPMESADFFbUUlfqIpmK0Tc4TFVtI5WlpZSVl+OSp3DU76G5
      2k5MKaWmzIUajzM8NAA2B/FYzBwBDMQUQAYQaoq4Bu4iN+/Yvx+/bxxHnosN9aVMs4EC3xku
      hgpoqnKS0gTuIhd2i0LKkke1Kw/z0KpxSEacCfb5fHg8nnQ3a2ICpPf5MkcAk5zGFIBJTmPI
      J9DIyAgWiwVZNlZfs65LkmSoHV3XDb+XTJKJ+zHSRjQaxeFwpKV9Q5ZBbTYbBQUFOBwOI5qf
      Q1VVACwWY1dz4/G44fcC0NXVRVNTk6E2dF1HVVVsNpuhdozsM5/Pl7bna/281tYBRgvZ5GpM
      AWQRNTU1a+1CzmEKIIvo6+tbaxdyDlMAJjmN+dGZRdTW1qalHU0XnB8Ocao/wObyAt7RWIpV
      kTF4sey6xBwBsojx8fFVt6ELwQ9P9PPlQxcYDcb4f6908xdPt6Ob8RTzYo4AWUQikVh1G0OB
      GI+eHuGrv7ib2pI8EqrGxx86zrmhILvritPg5frCHAGyiLKyslW34Y8kybcpFOfNrPPbLQoN
      pfkM+M1TevNhCiCLSCaTq26jvjQPXQiOdk0QiCQ5PxSkbTTE/vqSNHi4/jA/gbKIUCi06lGg
      KM/G5+7dxj+80Ml3XusD4A/v2UaV2/id7OsRUwBZhMvlSks7N9YW8U+/uJvxcILiPCsl+TbD
      46WuV0wBZBHpjJ1xOa24nNa0tbdeMecAWUQ6lkFNro1VCSAeGuWVl15hyB9Jlz85jdERmiZX
      s3IBCJ2J4XEqa4o5cuRkGl3KXSorK9fahZxj5QKQZGq3bSc6OohstaGl0alcZWBgYK1dyDlW
      PgkWOv0dHVRv38PZQ68SUVWSwSAws56taRrxeDxdfs6LrutIkjR3MMYoMnEvMLMTbLQdIQS6
      rqPrxuakM7LPVFVNW/urOhIZCwzx6rFWmvbczKZK99y/p/PEzmKstxNhqVQKq9XYlRvzRNiV
      rOrJcRbXcM/7zEMc6WJkZISNGzeutRs5hbkMmkWkUqm1diHnMAWQRVRUVKy1CzmHKYAswqyr
      kHlMAWQR4XB4rV3IOUwBZBFFRUVr7ULOYQogizDzAmUeUwBZhM/nW2sXcg5TAFlEJjbbTK7E
      HHOziGyoqRCMJnnolR5a+vzsqHbxu3dsxlNgX2u3DMMcAbKIoaGhNbWfVHU+/5/nkCT4wvub
      qXI7+K0fnCKhrt9QR1MAJnO0joSYTmh8+rYmdtcV8xvv3US+zcLxHv9au2YYpgCyiIaGhjW1
      f9WpYQFivn9fR5gCyCLW+jzAjmo3hQ4LXzvcxan+AN98pZtYSuNg4/pNqWIKIIvQtLX91rZZ
      ZP7yo7uQJPjLp9uZCCf45i/twW5Zv1WKzVWgLKKqqmqtXZjLK5QrmCNAFjE1NbXWLuQcpgCy
      iEjEzK6RaUwBZBHFxWb25kyzijmAYLTjJEfOD5BXWs89t+/DzEO2OtZTKdbrhVX1uKuyiZ97
      /13ER/oxPmfC+mdycnKtXcg5VjECSOQVFtJ26nUaD9yMU9MITU8DM9kadF1PS7rvxZhN7WF0
      io9M3AuA3W433I4QIiPLrUb2maZpaWt/VXmB2o48xqsDEjs3l6BursLpdAIzeYEkSTI8vl1V
      VSRJQlGMXafWNC0jsfolJSWG25l9WRhtx8g+k2U5bc/XqkaApgP3suEmFUm2YpMk5Mu5ZiRJ
      QpIkw79pZ9s32k4m7gVgdHTU8ErxMCOC67nP0vl8rVwAkoQ9rwB73qp9MLmMOQnOPGaPZxFm
      UqzMYwogizArxWceUwBZxCrStJqsEFMAWcSGDRvW2oWcY5FJsCDgHaRvZAJd2GjauQ233dzr
      NRK/32+KIMMsMgLEOXH4CGH18rpr5nzKWWKx2Fq7kHMsMAIkOf3KqwwEAzi7urAp+VRu3oQr
      B0cAIcA7leCZE8NMhBPctrWcdzSWYFHS//VYWlo69+fpuMq/nRzgeM8kNcV5/Nq7G6gpzmM5
      1U7jKY0X28do6fOzubyQD95YTaHDuqxrY0mNZy94eXMgwPYqFz93YzX5dmM3zYSAttEQj58Z
      warIfOimaprKC5fl72pZ4LdoZUNjLZXlG9navAVPgRVVMzbcIFsZD8f54hMd+MIJNhQ5+frL
      XTx2ZgTdgAnr7C5tUtX5syfb+Pc3higvdNDpDfPr33uDyUhiyTY0XfD1l2Z8bCor5NxQkD/+
      r/OoywgX0XTB3z1/kefavGypKOREr58vPn7B8N/9mwMBHnjkPCX5NuxWmT965DxtoyFDbc6y
      gLQFiWiESDTCVCiEvciD25GbFQyfOj9KjdvBA+9rRpEl9tcX8+dPtnPn9grcaa7DGwgEKC0t
      5aJ3ihfaxvj2r+xjd10xsaTG+//pCP/15jCfuqVx0Tb6JiMc75nka/fvocLtQNVq+eTDLZzs
      8/POTYvnHeocC3N2MMi3PrmP4nwbH99Xyyf++Thnh4Ls3WjcueBvvtzFb9+6iXt3ViGEwFNg
      519f6+Nvfv5Gw2zOsoAAVPzjAULBMTS7TMTXQ82OZlwGD4XZSCCSxFNgQ5FnxuPifBtxVTfk
      rZifnw9ALKUjgCLnzEvHaVNwO60EY0sHf0USKjaLQp59Jj7Kosh4Cmz4I0tfG46r5NksOKwz
      11oVieI8G8GosYU7JiNJKl0zcWSSJFHhcjC5DH/TwQKfQDZufM8tNJZXsLl5Ox63A6Hn5hr1
      bdvKOdrtp6XXT/9klO++3sdNtUWGVGEvLCwEoKm8gGq3g++81sux7km+f6yPvskId+9Yuozq
      prICbIrMI28OMxyI8WL7GBfHwrxzU+mS1zZXFZJUdQ6dHWEkGOPZC2MMBaPs3WjsQZ0P37SB
      b77SRc/ENB3eKb5/rI8P3JCZ89GLFMkTTE+O0NreS0FVA9saqrHIy5uVrKcieZoueObcED9o
      GSacSHGgvpTfub2J4vz0fxJ2dXXNBcNdGA7xxccv0DY6RUm+jT+4eysfvKkaeRkzw4HJKP/w
      QicXvWHKXXY+e+cWbqhxI0nSkkXyeiam+fvnO+meiFDldvC5e7ayrcp1zfdyLUXykqrOw0d7
      ebp1FEWW+PBNG/jEwTqsCyw0pPP5WkAAcS680crgQCfdowGgkA988ufZeHmYWor1JACY+WUK
      2Yqq6zhtChaDgtb6+vqor6+f+3ssqRFLaVgViQK7BekalkVSqk5M1bApMnaLPHftcqpEJlWd
      eErDbpVXnBLlWqtE6kIQTWggQZ5NWVToGagSaad5z3YC3gE8FRto2LqLqvz1myB1OThtCmDs
      uYOamisrbjptymW7147VImO1rEyoNouMbYXXrhRZkihwZH6OucBdSsiynZrGjZSVFBEY7CMQ
      NysYGo0ZDJd5FpG5jqYKFGvurfyY5A6LCEBjYnQUn8+Po6iUfOv6TY+XLdTW1q61CznHIq93
      B++45+eWbEAInVgkii2vgAx/Nq47xsfHTRFkmAUEkOCNF1+gYzRw+e/53P7h+6guePusWzA5
      2MaPf/IiH/3M77FheYtEJguQSCwd6mCSXhYQgJXm/e8ir+sC3UOTaLqd+bcABBa7m8rSa18n
      NrmasrKytXYh51hAADL5Liv9HYOMxYLY7R7U1Hz7ZTJFpaVY5Zk1eZ8vCMykRdE0jXjc2HRZ
      uq4jSdLcfoBRZOJeYKZQtt1u7HKzEAJd1w3PpWRkn6mqmrb2F50D1Dc3UZGY4nTbBPJCu8CS
      TFl1Nfk2C57CmWArn8+HoijraiMsExUcM2FnORth6cDIe7FYLGl7vhaYtgrG+9tp7xwkoRRS
      XVqAKhZ4YygO3nX3PXhye58sLczGAplkjgXXbWzOfNwFDhKJBJUNWyjPN2vYGk1enplkKdMs
      uBNcVL4Bu5ikp8fP0KULyzqMYbI6xsbG1tqFnGPRQ/HJeJKQbwJFOFBzNBw6kxj9XW5yNYts
      XdnYf8ttFDkj1Ow8SE2RuchvNJWVS8f7m6SXRQSQ4LUXX2PLgVuYvHCCwYCZscBo1rpMai6y
      aPCCmggz0NfPZGicI8+8xEQOR4QmVZ1ESkO7xk9BIQQJVSO+gmt1XZBUdVRdz2jWOO2y3Wv1
      93pkkTmAnXvu/59vySYgYcvBM8GaLnji/BjfeKUXfzTJHdsqeOB92/AULL3uq2qC7x/v4+sv
      dTGdULmzuYIvf3AnJQXzf+vX1dXN/XkinOCrL17iZK+f6iIHn71rC7s2uK/pUMxKGArE+Lvn
      LtI6HKKxLJ8/uq+ZBk++oTbXkkVGAAmr3Y7T6bz8nwMlE4lasozjPZN87eUefuf2Jh767/tI
      qhpfPtRGUl16J/Wp86N8+0gvv3/XVv7v/XsIRVP86WOtpBY4UD86OgrM5PX58qELlBfYeOiT
      e7n/QB2f/89zjE0ZuxIXSah87j/Osru2iO/8j/3ct7OKT//wTcLreORf4JWeov3kCdp6h7Hm
      F5CMCt51351UXRUMt/558twoe+uK+MiemdNadqvMb3zvFP5Ikkr34v3xxLkR3tFYyv0HZ97s
      iiTxmR+/SSShUpR39Sgwmx59KBBjPJzgwQ/uoLTATr0nn2cveHmty8d/21tz1XXposMbRpYk
      PravhjybhZpiJ4+dGeZUf4Bbt5YbZnctWTAxVvP+vRRZHOzcsx+PQyWWML6uVDayr76YjrFp
      Okan8IbiHOmcoLEsn8JlHN/bU1dM+2iI1uEQg/4or3SO01zlwr7A2Yquri4Aygrt2K0KJ/v8
      TMVS9ExM0zk2zY4NxgYd1pXkEUmqnB8KEY6nuOgNMxyMsaVi/e5QLxoLtG17FYefexpXzTaq
      lnkgfr1x384qzg8F+PXvn0KRJNx5Vr78oZ3LShf4iYN1dI6F+ZXvtABQXmjnrz92I84FBODx
      zMRSuZ1Wfv+uLfzNsxf5/rF+4qrOL9+8kS3lxj6IZYV2/uDurfz9851YFJlYUuUP79lK9Tpe
      Al8kLYrKGy8+SqvXRlmBhf133EH5MiZ+sP6yQkSiMfqCSabjKpsrCim5hpQoCVWjdXiKeEpj
      a2XhopNnn883JwKAYDTJUCBGSb6NKrcjLRPg5QTDTU4nGAnGqHA5KHet7HdoZDBcBrJCAKQI
      BaPEp1TiVoXppEo5uRnxpsgSO6rdK7rWblGWnVgqGAxeIYCiPNu8cwWjKS2wU7rMl931ziIC
      sFBZ20DCEcaeX2zWBsgABQUFa+1CzrHIMmiM7tZ+rGXVFOsRJiLmTrDRzOYGNckciwhAprRm
      E3uaPHT1DKHn4B5ApjGjQTPPAgJIMdQ9hi0vTktLK86yKkqcZqSi0Vit5mdmpllgDqDR33GW
      831DTMeSgIudt+ZmgYxMUl1dvdYu5BwLZoXYtvcgpfWN+Pxh1KRMvvXtg4VgtP0Ij7/axYbt
      B/jAe3Ya7ux6p7+/fy47tElmWOATSKG0sphLJ9/g2InXOHepB1V9+xxAp6etn1s/9BEmBy+y
      fqNFTNYziy+D1jdRuKGUsxcmSagqvG0fQJZn0l9IkoymqoSCM2lRVFXF6/VSVlbG6OgoiqJQ
      W1s7l/y1pqYGn89HPB7H4/GQSqUIhUIUFhaSl5fH2NgYVquV6upq+vv7gZlISa/XSzKZpLy8
      nHg8TiAQwOVykZ+fz/j4ODabjYqKCgYHB4GZ2JqRkRFSqRQVFRVEIhGmp6cpKirCYrHg8/lw
      OBx4PB6GhoYAaGhoYGBgAE3TqKqqYmpqiqmpKTweD7IsMzk5idPppKSkhOHhYWRZZuPGjfT3
      96PrOtXV1QSDQaLRKKWlpei6TiAQID8/H5fLNdcfdXV19Pb2XtEfqVSKYDCIqqoEg0EKCgoo
      KCjA6/Ve1R+1tbWMj4+TSCTm+mNqagqXy4XD4Zjrj8rKyrlzBhs3bmR4eJhYLEZNTQ3RaJRw
      OIzb7cZmszExMXFVf9TX1zM0NISqqnP9EYlEKC4unrc/JEmivr6e3t7eOZ9n+6OkZKbMkt/v
      n7c/+vr6EEJc9Xy8vT9gZrTctGnT3DP11v4oKysjmUzOPVNOp3Pe/qirq1u8QIZ/tJe2jl7C
      CQv733sznismwgJfz0kOvdxBzc6D3HVg69z/WW87wZlKizIwMHBFSLQRrIe0KBnaCY7zxivH
      0curcTrs83wrSXgaD/CrjQdW7YTJDMlkZupimfyMRT+BLHKM7v4B8mwutuRomdRMUl6+PkOO
      s5lFBKChks9N+3fjttlw5+BpsEwTj8dxucw8q5lk0RNhVRs3okVDBINTZlqUDDA1NbXWLuQc
      i1aI8Q4MoKJgsSiYgRDGY779M88iArCy/aYdRCa9hOOq4YexTcjISpPJlSyaGa63vZ2EzYWv
      p5MtO7dRaFv9PEDTBc9e8PLo6WFcTiu/fPNGdm0owkh9CQGtwyG+9lIXI8EYd2+v4Fff1bCs
      qoRCwJEuPw8d6SMYS3Hb1jJ+944tyzoSKQQ8cnqIbx/pJalqHGgo5Qvv306+ff4TYePj43Oj
      gDcU50uH2ugcm6LQYeWP39fM/vqSZfXTcCDGV55up2N0ivJCB3/y/mZ2VLuXde1ULMX3jvVz
      ss/PjmoXn3pPoyE1kd+KEPDqpQl+3DKAVZH5pYN1HGwoNfSZmGXRT6CUqmK1OpA0lVQa5gBC
      CB49PcwPjvfzsb017K8v5kuH2mgbDa267cXom4zw2Z+eoa7Eyf0H6jjWM8lfPduxYHaGt3Ky
      z88fP9pGvSefe3dU8krnBF86dGFZWSGeODfC/3mslUZPPjc3enihzcsDj5xb0O5sbYBQLMVn
      fvQmPRNh3t1URpHTyv/67kk6vEvPEUKxFJ/+0ZuMBGLcvb0Sp1Xhlx9uYTS0dDh7StP508da
      mZxO8GvvbkCWJH7v304v615Xw0sXx/nH5zv58E0buLO5nL9+poMTvZOG2pxDLEI0NC5OvHZE
      nLnQJaIpdbEfvYKJiQkRi8Wu+vekqokPfe2oODsYEEIIoeu6+PaRHvHg463LbvutpFIpkUql
      lvy5v36mQ3zquyeFqulCCCHODQbFO//iRdE7Mb3ktZ/9yWnxiYeOzV373AWv2PaFp8VwILrk
      tb/6Ly3i/m8dEylVE0II8cPj/aLhj54U/khi3p+Px+NCCCFO9EyKTQ88KU71+YUQQiRSmjjw
      58+Lv3q6fUmbL3WMia1/8pTo9E7NXbv7S8+Jb7zUJYQQQtM0kUjMb//MQEDc/61jIhxLCiGE
      UDVd/NI/HxdHL00safftzPf7X4j7v3VMHOmcsaHrunj8zLD49A9PLfjzCz1fK2HRAzEvPXqI
      AV+Qod5+wsn0VGFJafpc9XFJknBYZMPfMAlVw2aRUS4X+bBZZHQh0JeRbS2l6VgUae5a++Vr
      xTKu1YXAqshYlJludljlRW3OhnDMtD9ja9ZfWZaWlalt9mdm+9hmkZEl6S0JzhYmpesosoQi
      z9iVpZnrjf79JFUdx+VgS0mScFgVEgbbnEV58MEHH5z/f2m0vdFCRHIgCZm6pgYKljkHiEaj
      2Gy2q0IUZAmSms4PT/TT4MmnfXSKh4/28pu3blpR5oHZMj+yvHh5yvJCOw+92oOmC4LRFP98
      pId6Tz4f21s792AvhNOm8N3X+wnFUvT6InznaA/bq918bF8NliXsRpIqPzoxwEQ4QevIFN9+
      tYcba4v42N6auYfsrfj9fkpKSnBYFQ53jPNatw//dIoftwxwZjDIA+9rpsq9eD+5nVaeueDl
      VJ+fUEzlB8f7OT8S4s8+vJOiPNtciSRFuXoeUlpg48lzo3hDcYrzbDx5fpRT/QH+911b5kS8
      XFRVXXaIit0q842XutlcUUD/ZJSvvtDJr727gQbP/EdEF3q+VsKisUDJROLyG0XCZrcv+bDM
      slishqoLftIywE9PDeJyWPmtWzdxc6NnRROe5cYCCQEneib5q2c6GA7GuHdnJb9/11bceUsf
      QBECHnmjn3883E0wluL2beV86YM7KVrmtQ8f7eEbL3eTVHUONpTwj7+wm0Ln/P6+9aHp90X5
      7E/P0DkWptBh4c8/tIvbm8uX1U89ExE+/59naR8NU15o5ysf2cXBxplJ5VKxQP5Ikq++0MmJ
      Pj87q9187t6tlBde++rUtcQCCQGHzg7zL6/3YVVkPvWeRu5srljwXtMZC7SIAFaOGQy3Mvr6
      +qivrzfUhhkMdyVmaesswuhqlyZXYwogizALZGQeUwBZxPT09Fq7kHOYAsgiTAFkHlMAWURR
      UdFau5BzmALIIoxezTK5mlULQAgNb38/sdwsH5BWfD7fWruQc6xSADqDbS386Mf/hd88zrpq
      nM71m4c/W1mlACQq67dRX7Gy1OEmVzKbNsQkc6zoo1MIwekjT+K3N3Ln3npkaWYTx+ebyQuU
      TCbRNI14PJ5WZ9+OrutIkmT4BlIm7gVm0qLM1gkzitlYIH0ZwXGrwcg+U1V1wfZ1IbgwMlPO
      andd0ZLVPFckAEmS2HPLBy5bTLJl1w0UOyy4CmeKO/h8PhRFMUMhrhGLxWK4nfUQCmGxWOZ9
      vpKqzt8+00FLr5+qIidfe7WfL39wBwcbSxdua9XeyDa279276mZMMDwOaL1ztMtH51iYn/7m
      zdgtMi29fr764iW+WeXC7Zw/eNFcBs0iZtMemqyM9tEpbqwtwmFVkCSJpvICEqpOKLZw5lpT
      AFmE0d/l652baos41RdgIpwgntJ4oz+Ay2GleJHQdXPnJYsw6wOsjgMNJZxuKuXXv/cG7jwr
      kYTKF96/nULHOhGArgtaR0Ic7hinJN/Gnds8KzqskSmEgAF/hJ++MUQgkuR9u6q4eVPpggeL
      gsEgeXl5AMRTGs+3jXG0y0dDaT4/v6+Gknx7RjIlXK9YFZnfvrWJe3dWMTmdYEtlIcVLVNm8
      bj6BhBAcvjjOg49fQEKi0xvmgUdaGQ9n7w5cr2+az/zoNJfGwugC/vSxVh55c3jB88TRaBQA
      Vdf5pxe7+MbLXdgVmVcvTfA7Pz7NdMKswrAUsjzz7X+wsXTJhx+uoxEgntJ5+Ggvn793Gwcb
      S9F0wVeebOfQ+VF+45ZNa+3evPzg+AANnnz+7uM3YlVknjg3wt8/18l9uyopmCfX6uxGWM9E
      hCfOjfD1T+xhV42beErjo994nafOe/mF/bWZvo11zXUzAqi6TjiWmjsUrsgSNcVOxqcSa+zZ
      woxNxakucmK9fKB8g9tJKJZaMrvDdFxFkpirSO+wKlS4HHinjN+MyzWuGwE4rQr7G0r44Yl+
      hgMxWodDPNfm5dYtZWvt2oLcvaOCVzsnOHrJR9vIFD9qGeCdm0rJs82fGc7v9wPQUJZPab6d
      /zg1yEVvmGdaR+nwTnHHNjN9erq5rg7F+yNJ/uH5Ts4Ph7BZZD5yYyUf3VOD3WZsedGV7mom
      VI2Hj/byk5ZB4qrO7roivviB7VQtkAJmZGRkbiXo/FCIrzzVTo8vQqHDwqdvbeJDu6uRVzkL
      Xg87wTmdFSKl6QSjSayKTJ5VQpakrA6F0HSBbzpBStPxFNhxWOd/+wNEIpErqsVPx1UC0SR5
      NoWSfFtaEhSbAriS62YSPItVkSm7vPR5PWRRUGSJCtfyflGjo6NXlEktcFiWlcDXZOVcN3OA
      XGC+bG0mxmIKIIswukKkydWYAsgiZmvemmQOUwBZhAHrESZLYAogi6ipqVlrF3IOUwBZhJkV
      IvOYAsgiMnHu2ORKVrHILJjoPsurZ7pxVW3htnfuuv42FbIMj8ez1i7kHKsaAWyFldxz7x0E
      uzpYugSbyVJcDxt7640VvbSnfUN0D0/R1LyZ4baT1O45QJ6mMR2bkYGqqui6TiplbPy6pmlI
      kmT46kkm7gVm5gBut7E5loQQaJpm+P0Y2WezaV3S0f6KBKDYHLhcGr0tz9IyJLixuYzUW2Jy
      ZFlGkqQla3etltm8QEbbyYQNgMLCQrPPltl2utpfkQCcLg8NhaWEi/Ioqk+gWJxYZRnlcnDS
      9PQ0kiQZvrU/++Y32k4m7gXA7XZn5F6EENd1n80KIB3tr3zeKkkUFpdRWLxqH0wu4/V6rwiG
      MzEecxk0i7BajT3XYHI1pgCyCDMtSuYxBZBFmJnhMo8pAJOcxhRAFlFba6Y8yTSmALKIsbGx
      tXYh5zAFkEUkk9mb5W69YgogiygvN/P+ZBpTAFmEGQ6deUwBZBFTU1Nr7ULOYQogi3C5XGvt
      Qs5hCiCLyEQhPpMrMeQQl6qqTE9Pk0gYm7l59jyA0aG9qVTK8HsB6O7uZtMmY1O9z54HMDqd
      pJF9NttuOto3pBcURUHX9blqJ0YRi8WQJMnwN2cgEDD8XmAmK4TRdlRVJRqNGm7HyD5LJBJp
      e74MEcBsvLbR0Y3JZBJZlg23kwkbmbIzG0d/PffZ7IifjvYNGwedzvlTgKcTq9WalozJS5GJ
      e8mUHUmSsNsXr56eDoy+l3S1b5gA3prm2yiMTvE9SybuJVN2FEXJiNCMvpd0tW/4KlDY282h
      xx6jc3SKdJ9dn54c4JlDj3LsXA+agQfjhdAZ72vn0pDfKAuEx7p54tAzDPmjBnlKKh8AAAS6
      SURBVNm4bElP0XnmOBMGmvEPtPHoo49yrmfcOCOXCQy28ehjh+j3reyGDBdAKCrYf9MGXjt6
      Pu1tx+Ia+997GyOtrxGIaGlvf5ZocJjDTz1D56hBG1V6ipaXj1O3pYYTJ88YYwMAwWjXWZ59
      /jB+A/PYhOIKd9/zXk4cedk4I5cJRBUO7Cjh9RMdK7reMAHEIyHGfQGq6jcx5Q9jscSA9Lyl
      U/EI4xOTuMtr0SYHKN54A+689H/NJSJTTPgmsblq2bdnC4YdIxca8ZSN4pJCpsMBo6wAEtVb
      bqB5Q6mBNqB+cxMT3e1svWGfYTai4QDjkyEatmzGNz6FIq8sjMSwOUB40svFsSTFA53YXBXE
      ptrS1nYi7ONi9wQeh0rHYJjde29CEgJI74Q4EvDSNTrNLpexDwyyldJiwcX2XjxlG4y1lQG6
      Tx7mQriA/TeUGGYjOD5Ed9CCtyeA01NNZGB4Re0YViNsNs1fMuyj9WIf1U07qChypvURnRi4
      SM9oEEuem53NW7BbjPuim/Z7iUiFVBQbM7lLTPtovzRC/dZmivKMXKLUGR/sx1nRQKFBawj9
      F8/iDcaxuivYs60+7e2/9fmKBUe50DVC/bZdeAqu/YYMF4CJSbpJ5/NlxgKZ5DSmAExyGlMA
      aUaLhXjiuefpbL3IYusSkd4TvNC6+Dr5+ddfpt8f+dk1/Sd54ZwX0HjzuScZXsZSZsfRZ+ka
      vsS/PXZ8Wf7nGmZK/3lQ4xF+8oOHkW2FbL75buJdJ+gNJNhz406OHz+Jp8hJKGEnEQ1QUSBh
      abqDzUo/b7Z2U7ZlP8Ggn8G4TjjupaO1k4LGvXiigwz4Y+x6zy30v/4isagfaUctoHPuhZ9y
      1mfDUeBhVy2caxuhuG4zwydfp8ZRQV9LNx39Qe5+VyWhWCUA0VCIyeFOXjt1CktBFTV5QdqH
      wlhdG9lXBycvjRJPyViHWynDTufZs3x3/ALv/fivUO82f+2zmCPAfAidKQq4bf9WRrq76Y/n
      ce87ttDZeQndWsa2eheuup1U5dvYd+t+fP2jTE9PI4sU3vEACJ1IOEZd807qN+3k1q0ujrX2
      Isk6/p5WhkUttx3YNmcumUxwwy134Q738sorp4kImUg4jqe6lsoiG9GUSnx8nCn1ys2+gbYT
      jIQ0UvEQvskomw4cJG/az8n2Xm65/TYKEFRW1bChupTiDdt457ZCRibNY5dvxRTAAkiygqLI
      WJyFFKcmeProeSoqq5AkGUkCRbGgKFYsFgVJCLo6LyHsdkTqcmYHLc4Lj/473aNe2oamaahw
      o6s6jsoGCqYv8XLLz3YutVSClsPPMip52LWjFkVLIdvyKLRrjAz2c2lgEmeeTCJ55YJdRd1m
      nBYNsOKwW1AUBRmJhsoSXj58mNGpJM48Ba93EllRkGU5TVuR6wdzGXQeZg+NKLKELiQkdFRN
      YLEo6LpAlkEICYSOrMhomkBCRxMgSzIgkABd6DM/r1iQ0dF0sFgtCE1FFyDJFiyKoOWJ76I3
      f4R99S4USZBSNRSLBUno6EgITYPLB38EEhZFQlM1JEVGS6kgK8iSAEkGXTDee5YjLWdIurbx
      8fsOMOuRIgmEpKDIxkfQGkk6n6//Dy797AOqWkTgAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
